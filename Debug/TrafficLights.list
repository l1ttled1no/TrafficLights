
TrafficLights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002514  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002620  08002620  00003620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002644  08002644  00004078  2**0
                  CONTENTS
  4 .ARM          00000000  08002644  08002644  00004078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002644  08002644  00004078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002644  08002644  00003644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002648  08002648  00003648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800264c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000078  080026c4  00004078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  080026c4  00004130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a15  00000000  00000000  000040a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b4a  00000000  00000000  0000cab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0000e600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a5  00000000  00000000  0000f000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c6c  00000000  00000000  0000f7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3d2  00000000  00000000  00026411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000846d2  00000000  00000000  000317e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5eb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002804  00000000  00000000  000b5ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000b86fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002608 	.word	0x08002608

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002608 	.word	0x08002608

0800014c <isButtonPressed>:
int TimeOutForKeyPress[NUM_BUTTONS] = {50, 50, 50};
int button_pressed[NUM_BUTTONS] = {0, 0, 0};
int button_long_pressed[NUM_BUTTONS] = {0, 0, 0};
int button_flag[NUM_BUTTONS] = {0, 0, 0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
        button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
    }
    return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000a0 	.word	0x200000a0

08000180 <isButtonLongPressed>:

int isButtonLongPressed(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
    if(button_long_pressed[index] == 1){
 8000188:	4a09      	ldr	r2, [pc, #36]	@ (80001b0 <isButtonLongPressed+0x30>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d106      	bne.n	80001a2 <isButtonLongPressed+0x22>
        button_long_pressed[index] = 0;
 8000194:	4a06      	ldr	r2, [pc, #24]	@ (80001b0 <isButtonLongPressed+0x30>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2100      	movs	r1, #0
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800019e:	2301      	movs	r3, #1
 80001a0:	e000      	b.n	80001a4 <isButtonLongPressed+0x24>
    }
    return 0;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000094 	.word	0x20000094

080001b4 <getKeyInput>:
    button_flag[index] = 1;
}



void getKeyInput(){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
    for(int i = 0; i < NUM_BUTTONS; i++){
 80001ba:	2300      	movs	r3, #0
 80001bc:	607b      	str	r3, [r7, #4]
 80001be:	e096      	b.n	80002ee <getKeyInput+0x13a>
    	KeyReg2[i] = KeyReg1[i];
 80001c0:	4a4f      	ldr	r2, [pc, #316]	@ (8000300 <getKeyInput+0x14c>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c8:	494e      	ldr	r1, [pc, #312]	@ (8000304 <getKeyInput+0x150>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	KeyReg1[i] = KeyReg0[i];
 80001d0:	4a4d      	ldr	r2, [pc, #308]	@ (8000308 <getKeyInput+0x154>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	4949      	ldr	r1, [pc, #292]	@ (8000300 <getKeyInput+0x14c>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        // Add your key
        switch(i){
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b02      	cmp	r3, #2
 80001e4:	d01f      	beq.n	8000226 <getKeyInput+0x72>
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2b02      	cmp	r3, #2
 80001ea:	dc27      	bgt.n	800023c <getKeyInput+0x88>
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d003      	beq.n	80001fa <getKeyInput+0x46>
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d00b      	beq.n	8000210 <getKeyInput+0x5c>
 80001f8:	e020      	b.n	800023c <getKeyInput+0x88>
            case 0:
                KeyReg0[i] = HAL_GPIO_ReadPin(L_BUTTON_GPIO_Port, L_BUTTON_Pin);
 80001fa:	2180      	movs	r1, #128	@ 0x80
 80001fc:	4843      	ldr	r0, [pc, #268]	@ (800030c <getKeyInput+0x158>)
 80001fe:	f001 f9d7 	bl	80015b0 <HAL_GPIO_ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	4619      	mov	r1, r3
 8000206:	4a40      	ldr	r2, [pc, #256]	@ (8000308 <getKeyInput+0x154>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 800020e:	e015      	b.n	800023c <getKeyInput+0x88>
            case 1:
                KeyReg0[i] = HAL_GPIO_ReadPin(N_BUTTON_GPIO_Port, N_BUTTON_Pin);
 8000210:	2140      	movs	r1, #64	@ 0x40
 8000212:	483f      	ldr	r0, [pc, #252]	@ (8000310 <getKeyInput+0x15c>)
 8000214:	f001 f9cc 	bl	80015b0 <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	4619      	mov	r1, r3
 800021c:	4a3a      	ldr	r2, [pc, #232]	@ (8000308 <getKeyInput+0x154>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 8000224:	e00a      	b.n	800023c <getKeyInput+0x88>
            case 2:
                KeyReg0[i] = HAL_GPIO_ReadPin(Y_BUTTON_GPIO_Port, Y_BUTTON_Pin);
 8000226:	2120      	movs	r1, #32
 8000228:	4839      	ldr	r0, [pc, #228]	@ (8000310 <getKeyInput+0x15c>)
 800022a:	f001 f9c1 	bl	80015b0 <HAL_GPIO_ReadPin>
 800022e:	4603      	mov	r3, r0
 8000230:	4619      	mov	r1, r3
 8000232:	4a35      	ldr	r2, [pc, #212]	@ (8000308 <getKeyInput+0x154>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                break;
 800023a:	bf00      	nop
        }

        if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800023c:	4a30      	ldr	r2, [pc, #192]	@ (8000300 <getKeyInput+0x14c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000244:	4930      	ldr	r1, [pc, #192]	@ (8000308 <getKeyInput+0x154>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800024c:	429a      	cmp	r2, r3
 800024e:	d14b      	bne.n	80002e8 <getKeyInput+0x134>
 8000250:	4a2b      	ldr	r2, [pc, #172]	@ (8000300 <getKeyInput+0x14c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000258:	492a      	ldr	r1, [pc, #168]	@ (8000304 <getKeyInput+0x150>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000260:	429a      	cmp	r2, r3
 8000262:	d141      	bne.n	80002e8 <getKeyInput+0x134>
            if (KeyReg2[i] != KeyReg3[i]){
 8000264:	4a27      	ldr	r2, [pc, #156]	@ (8000304 <getKeyInput+0x150>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026c:	4929      	ldr	r1, [pc, #164]	@ (8000314 <getKeyInput+0x160>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000274:	429a      	cmp	r2, r3
 8000276:	d018      	beq.n	80002aa <getKeyInput+0xf6>
                KeyReg3[i] = KeyReg2[i];
 8000278:	4a22      	ldr	r2, [pc, #136]	@ (8000304 <getKeyInput+0x150>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000280:	4924      	ldr	r1, [pc, #144]	@ (8000314 <getKeyInput+0x160>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (KeyReg0[i] == PRESSED_STATE){
 8000288:	4a1f      	ldr	r2, [pc, #124]	@ (8000308 <getKeyInput+0x154>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d129      	bne.n	80002e8 <getKeyInput+0x134>
                    TimeOutForKeyPress[i] = 100;
 8000294:	4a20      	ldr	r2, [pc, #128]	@ (8000318 <getKeyInput+0x164>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2164      	movs	r1, #100	@ 0x64
 800029a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    //forfun(i);
                    button_flag[i] = 1;
 800029e:	4a1f      	ldr	r2, [pc, #124]	@ (800031c <getKeyInput+0x168>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2101      	movs	r1, #1
 80002a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002a8:	e01e      	b.n	80002e8 <getKeyInput+0x134>
                }
            }else{
                TimeOutForKeyPress[i]--;
 80002aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000318 <getKeyInput+0x164>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b2:	1e5a      	subs	r2, r3, #1
 80002b4:	4918      	ldr	r1, [pc, #96]	@ (8000318 <getKeyInput+0x164>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TimeOutForKeyPress[i] == 0){
 80002bc:	4a16      	ldr	r2, [pc, #88]	@ (8000318 <getKeyInput+0x164>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d10f      	bne.n	80002e8 <getKeyInput+0x134>
                    TimeOutForKeyPress[i] = 10;
 80002c8:	4a13      	ldr	r2, [pc, #76]	@ (8000318 <getKeyInput+0x164>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	210a      	movs	r1, #10
 80002ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    if (KeyReg3[i] == PRESSED_STATE){
 80002d2:	4a10      	ldr	r2, [pc, #64]	@ (8000314 <getKeyInput+0x160>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d104      	bne.n	80002e8 <getKeyInput+0x134>
                        //subKeyProcess(i);
                        button_flag[i] = 1;
 80002de:	4a0f      	ldr	r2, [pc, #60]	@ (800031c <getKeyInput+0x168>)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2101      	movs	r1, #1
 80002e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0; i < NUM_BUTTONS; i++){
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	3301      	adds	r3, #1
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2b02      	cmp	r3, #2
 80002f2:	f77f af65 	ble.w	80001c0 <getKeyInput+0xc>
                    }
                }
            }
        }
    }
}
 80002f6:	bf00      	nop
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	2000000c 	.word	0x2000000c
 8000304:	20000018 	.word	0x20000018
 8000308:	20000000 	.word	0x20000000
 800030c:	40011000 	.word	0x40011000
 8000310:	40010c00 	.word	0x40010c00
 8000314:	20000024 	.word	0x20000024
 8000318:	20000030 	.word	0x20000030
 800031c:	200000a0 	.word	0x200000a0

08000320 <setLightH>:
//    HAL_GPIO_WritePin(port, red_pin, red ? 1 : 0);
//    HAL_GPIO_WritePin(port, yellow_pin, yellow ? 1 : 0);
//    HAL_GPIO_WritePin(port, green_pin, green ? 1 : 0);
//}

void setLightH(int choice){
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	switch (choice){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b48      	cmp	r3, #72	@ 0x48
 800032c:	d01d      	beq.n	800036a <setLightH+0x4a>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2b48      	cmp	r3, #72	@ 0x48
 8000332:	dc44      	bgt.n	80003be <setLightH+0x9e>
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2b0c      	cmp	r3, #12
 8000338:	d02c      	beq.n	8000394 <setLightH+0x74>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2b45      	cmp	r3, #69	@ 0x45
 800033e:	d13e      	bne.n	80003be <setLightH+0x9e>
	case red_light:
	{
		HAL_GPIO_WritePin(HA_GPIO_Port, HA_Pin, 1);
 8000340:	2201      	movs	r2, #1
 8000342:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000346:	482a      	ldr	r0, [pc, #168]	@ (80003f0 <setLightH+0xd0>)
 8000348:	f001 f949 	bl	80015de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HB_GPIO_Port, HB_Pin, 1);
 800034c:	2201      	movs	r2, #1
 800034e:	2110      	movs	r1, #16
 8000350:	4827      	ldr	r0, [pc, #156]	@ (80003f0 <setLightH+0xd0>)
 8000352:	f001 f944 	bl	80015de <HAL_GPIO_WritePin>
		red_flag = 1;
 8000356:	4b27      	ldr	r3, [pc, #156]	@ (80003f4 <setLightH+0xd4>)
 8000358:	2201      	movs	r2, #1
 800035a:	601a      	str	r2, [r3, #0]
		grn_flag = 0;
 800035c:	4b26      	ldr	r3, [pc, #152]	@ (80003f8 <setLightH+0xd8>)
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
		yel_flag = 0;
 8000362:	4b26      	ldr	r3, [pc, #152]	@ (80003fc <setLightH+0xdc>)
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
		break;
 8000368:	e03e      	b.n	80003e8 <setLightH+0xc8>
	}
	case yel_light:
	{
		HAL_GPIO_WritePin(HA_GPIO_Port, HA_Pin, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000370:	481f      	ldr	r0, [pc, #124]	@ (80003f0 <setLightH+0xd0>)
 8000372:	f001 f934 	bl	80015de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HB_GPIO_Port, HB_Pin, 1);
 8000376:	2201      	movs	r2, #1
 8000378:	2110      	movs	r1, #16
 800037a:	481d      	ldr	r0, [pc, #116]	@ (80003f0 <setLightH+0xd0>)
 800037c:	f001 f92f 	bl	80015de <HAL_GPIO_WritePin>
		red_flag = 0;
 8000380:	4b1c      	ldr	r3, [pc, #112]	@ (80003f4 <setLightH+0xd4>)
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
		grn_flag = 0;
 8000386:	4b1c      	ldr	r3, [pc, #112]	@ (80003f8 <setLightH+0xd8>)
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
		yel_flag = 1;
 800038c:	4b1b      	ldr	r3, [pc, #108]	@ (80003fc <setLightH+0xdc>)
 800038e:	2201      	movs	r2, #1
 8000390:	601a      	str	r2, [r3, #0]
		break;
 8000392:	e029      	b.n	80003e8 <setLightH+0xc8>
	}
	case grn_light:
	{
		HAL_GPIO_WritePin(HA_GPIO_Port, HA_Pin, 1);
 8000394:	2201      	movs	r2, #1
 8000396:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800039a:	4815      	ldr	r0, [pc, #84]	@ (80003f0 <setLightH+0xd0>)
 800039c:	f001 f91f 	bl	80015de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HB_GPIO_Port, HB_Pin, 0);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2110      	movs	r1, #16
 80003a4:	4812      	ldr	r0, [pc, #72]	@ (80003f0 <setLightH+0xd0>)
 80003a6:	f001 f91a 	bl	80015de <HAL_GPIO_WritePin>
		red_flag = 0;
 80003aa:	4b12      	ldr	r3, [pc, #72]	@ (80003f4 <setLightH+0xd4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
		grn_flag = 1;
 80003b0:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <setLightH+0xd8>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
		yel_flag = 0;
 80003b6:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <setLightH+0xdc>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
		break;
 80003bc:	e014      	b.n	80003e8 <setLightH+0xc8>
	}
	default:
	{
		HAL_GPIO_WritePin(HA_GPIO_Port, HA_Pin, 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003c4:	480a      	ldr	r0, [pc, #40]	@ (80003f0 <setLightH+0xd0>)
 80003c6:	f001 f90a 	bl	80015de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HB_GPIO_Port, HB_Pin, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2110      	movs	r1, #16
 80003ce:	4808      	ldr	r0, [pc, #32]	@ (80003f0 <setLightH+0xd0>)
 80003d0:	f001 f905 	bl	80015de <HAL_GPIO_WritePin>
		red_flag = 0;
 80003d4:	4b07      	ldr	r3, [pc, #28]	@ (80003f4 <setLightH+0xd4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
		grn_flag = 0;
 80003da:	4b07      	ldr	r3, [pc, #28]	@ (80003f8 <setLightH+0xd8>)
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
		yel_flag = 0;
 80003e0:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <setLightH+0xdc>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
		break;
 80003e6:	bf00      	nop
	}
	}
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40010c00 	.word	0x40010c00
 80003f4:	200000ac 	.word	0x200000ac
 80003f8:	200000b0 	.word	0x200000b0
 80003fc:	200000b4 	.word	0x200000b4

08000400 <setLightV>:

void setLightV(int choice){
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	switch (choice){
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2b48      	cmp	r3, #72	@ 0x48
 800040c:	d01e      	beq.n	800044c <setLightV+0x4c>
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2b48      	cmp	r3, #72	@ 0x48
 8000412:	dc47      	bgt.n	80004a4 <setLightV+0xa4>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2b0c      	cmp	r3, #12
 8000418:	d02e      	beq.n	8000478 <setLightV+0x78>
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2b45      	cmp	r3, #69	@ 0x45
 800041e:	d141      	bne.n	80004a4 <setLightV+0xa4>
	case red_light:
	{
		HAL_GPIO_WritePin(VA_GPIO_Port, VA_Pin, 1);
 8000420:	2201      	movs	r2, #1
 8000422:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000426:	482c      	ldr	r0, [pc, #176]	@ (80004d8 <setLightV+0xd8>)
 8000428:	f001 f8d9 	bl	80015de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VB_GPIO_Port, VB_Pin, 1);
 800042c:	2201      	movs	r2, #1
 800042e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000432:	4829      	ldr	r0, [pc, #164]	@ (80004d8 <setLightV+0xd8>)
 8000434:	f001 f8d3 	bl	80015de <HAL_GPIO_WritePin>
		red_flag = 1;
 8000438:	4b28      	ldr	r3, [pc, #160]	@ (80004dc <setLightV+0xdc>)
 800043a:	2201      	movs	r2, #1
 800043c:	601a      	str	r2, [r3, #0]
				grn_flag = 0;
 800043e:	4b28      	ldr	r3, [pc, #160]	@ (80004e0 <setLightV+0xe0>)
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
				yel_flag = 0;
 8000444:	4b27      	ldr	r3, [pc, #156]	@ (80004e4 <setLightV+0xe4>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
		break;
 800044a:	e041      	b.n	80004d0 <setLightV+0xd0>
	}
	case yel_light:
	{
		HAL_GPIO_WritePin(VA_GPIO_Port, VA_Pin, 0);
 800044c:	2200      	movs	r2, #0
 800044e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000452:	4821      	ldr	r0, [pc, #132]	@ (80004d8 <setLightV+0xd8>)
 8000454:	f001 f8c3 	bl	80015de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VB_GPIO_Port, VB_Pin, 1);
 8000458:	2201      	movs	r2, #1
 800045a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800045e:	481e      	ldr	r0, [pc, #120]	@ (80004d8 <setLightV+0xd8>)
 8000460:	f001 f8bd 	bl	80015de <HAL_GPIO_WritePin>
		red_flag = 0;
 8000464:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <setLightV+0xdc>)
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
				grn_flag = 0;
 800046a:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <setLightV+0xe0>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
				yel_flag = 1;
 8000470:	4b1c      	ldr	r3, [pc, #112]	@ (80004e4 <setLightV+0xe4>)
 8000472:	2201      	movs	r2, #1
 8000474:	601a      	str	r2, [r3, #0]
		break;
 8000476:	e02b      	b.n	80004d0 <setLightV+0xd0>
	}
	case grn_light:
	{
		HAL_GPIO_WritePin(VA_GPIO_Port, VA_Pin, 1);
 8000478:	2201      	movs	r2, #1
 800047a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800047e:	4816      	ldr	r0, [pc, #88]	@ (80004d8 <setLightV+0xd8>)
 8000480:	f001 f8ad 	bl	80015de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VB_GPIO_Port, VB_Pin, 0);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800048a:	4813      	ldr	r0, [pc, #76]	@ (80004d8 <setLightV+0xd8>)
 800048c:	f001 f8a7 	bl	80015de <HAL_GPIO_WritePin>
		red_flag = 0;
 8000490:	4b12      	ldr	r3, [pc, #72]	@ (80004dc <setLightV+0xdc>)
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
				grn_flag = 1;
 8000496:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <setLightV+0xe0>)
 8000498:	2201      	movs	r2, #1
 800049a:	601a      	str	r2, [r3, #0]
				yel_flag = 0;
 800049c:	4b11      	ldr	r3, [pc, #68]	@ (80004e4 <setLightV+0xe4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
		break;
 80004a2:	e015      	b.n	80004d0 <setLightV+0xd0>
	}
	default:
	{
		HAL_GPIO_WritePin(VA_GPIO_Port, VA_Pin, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004aa:	480b      	ldr	r0, [pc, #44]	@ (80004d8 <setLightV+0xd8>)
 80004ac:	f001 f897 	bl	80015de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VB_GPIO_Port, VB_Pin, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004b6:	4808      	ldr	r0, [pc, #32]	@ (80004d8 <setLightV+0xd8>)
 80004b8:	f001 f891 	bl	80015de <HAL_GPIO_WritePin>
		red_flag = 0;
 80004bc:	4b07      	ldr	r3, [pc, #28]	@ (80004dc <setLightV+0xdc>)
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
				grn_flag = 0;
 80004c2:	4b07      	ldr	r3, [pc, #28]	@ (80004e0 <setLightV+0xe0>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
				yel_flag = 0;
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <setLightV+0xe4>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
		break;
 80004ce:	bf00      	nop
	}
	}
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40010800 	.word	0x40010800
 80004dc:	200000ac 	.word	0x200000ac
 80004e0:	200000b0 	.word	0x200000b0
 80004e4:	200000b4 	.word	0x200000b4

080004e8 <auto_traffic>:
	segment_buffer[1] = led1%10; //digit
	segment_buffer[2] = led2/10;
	segment_buffer[3] = led2%10;
}

void auto_traffic(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	//updateLED();
	switch(traffic_status){
 80004ec:	4b42      	ldr	r3, [pc, #264]	@ (80005f8 <auto_traffic+0x110>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3b01      	subs	r3, #1
 80004f2:	2b04      	cmp	r3, #4
 80004f4:	d867      	bhi.n	80005c6 <auto_traffic+0xde>
 80004f6:	a201      	add	r2, pc, #4	@ (adr r2, 80004fc <auto_traffic+0x14>)
 80004f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fc:	08000511 	.word	0x08000511
 8000500:	08000531 	.word	0x08000531
 8000504:	080005c7 	.word	0x080005c7
 8000508:	0800055d 	.word	0x0800055d
 800050c:	08000589 	.word	0x08000589
    case INIT:
      	ns_time_left = green_duration;
 8000510:	4b3a      	ldr	r3, [pc, #232]	@ (80005fc <auto_traffic+0x114>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a3a      	ldr	r2, [pc, #232]	@ (8000600 <auto_traffic+0x118>)
 8000516:	6013      	str	r3, [r2, #0]
    	ew_time_left = red_duration;
 8000518:	4b3a      	ldr	r3, [pc, #232]	@ (8000604 <auto_traffic+0x11c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a3a      	ldr	r2, [pc, #232]	@ (8000608 <auto_traffic+0x120>)
 800051e:	6013      	str	r3, [r2, #0]
    	timer = green_duration;
 8000520:	4b36      	ldr	r3, [pc, #216]	@ (80005fc <auto_traffic+0x114>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a39      	ldr	r2, [pc, #228]	@ (800060c <auto_traffic+0x124>)
 8000526:	6013      	str	r3, [r2, #0]
    	traffic_status = NS_GREEN_EW_RED;
 8000528:	4b33      	ldr	r3, [pc, #204]	@ (80005f8 <auto_traffic+0x110>)
 800052a:	2202      	movs	r2, #2
 800052c:	601a      	str	r2, [r3, #0]
    	break;
 800052e:	e04a      	b.n	80005c6 <auto_traffic+0xde>
    case NS_GREEN_EW_RED:
    	setLightV(grn_light);
 8000530:	200c      	movs	r0, #12
 8000532:	f7ff ff65 	bl	8000400 <setLightV>
    	setLightH(red_light);
 8000536:	2045      	movs	r0, #69	@ 0x45
 8000538:	f7ff fef2 	bl	8000320 <setLightH>
        if (timer == 0) {
 800053c:	4b33      	ldr	r3, [pc, #204]	@ (800060c <auto_traffic+0x124>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d13b      	bne.n	80005bc <auto_traffic+0xd4>
            traffic_status = NS_YELLOW_EW_RED;
 8000544:	4b2c      	ldr	r3, [pc, #176]	@ (80005f8 <auto_traffic+0x110>)
 8000546:	2203      	movs	r2, #3
 8000548:	601a      	str	r2, [r3, #0]
            ns_time_left = yellow_duration;
 800054a:	4b31      	ldr	r3, [pc, #196]	@ (8000610 <auto_traffic+0x128>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a2c      	ldr	r2, [pc, #176]	@ (8000600 <auto_traffic+0x118>)
 8000550:	6013      	str	r3, [r2, #0]
            timer = yellow_duration;
 8000552:	4b2f      	ldr	r3, [pc, #188]	@ (8000610 <auto_traffic+0x128>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a2d      	ldr	r2, [pc, #180]	@ (800060c <auto_traffic+0x124>)
 8000558:	6013      	str	r3, [r2, #0]
        }
        break;
 800055a:	e02f      	b.n	80005bc <auto_traffic+0xd4>
	case NS_RED_EW_GREEN:
		   setLightV(red_light);
 800055c:	2045      	movs	r0, #69	@ 0x45
 800055e:	f7ff ff4f 	bl	8000400 <setLightV>
		   setLightH(grn_light);
 8000562:	200c      	movs	r0, #12
 8000564:	f7ff fedc 	bl	8000320 <setLightH>
	        if (timer == 0) {
 8000568:	4b28      	ldr	r3, [pc, #160]	@ (800060c <auto_traffic+0x124>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d127      	bne.n	80005c0 <auto_traffic+0xd8>
	            traffic_status = NS_RED_EW_YELLOW;
 8000570:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <auto_traffic+0x110>)
 8000572:	2205      	movs	r2, #5
 8000574:	601a      	str	r2, [r3, #0]
	            ew_time_left = yellow_duration;
 8000576:	4b26      	ldr	r3, [pc, #152]	@ (8000610 <auto_traffic+0x128>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a23      	ldr	r2, [pc, #140]	@ (8000608 <auto_traffic+0x120>)
 800057c:	6013      	str	r3, [r2, #0]
	            timer = yellow_duration;
 800057e:	4b24      	ldr	r3, [pc, #144]	@ (8000610 <auto_traffic+0x128>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a22      	ldr	r2, [pc, #136]	@ (800060c <auto_traffic+0x124>)
 8000584:	6013      	str	r3, [r2, #0]
	        }
	        break;
 8000586:	e01b      	b.n	80005c0 <auto_traffic+0xd8>
	 case NS_RED_EW_YELLOW:
	        setLightH(yel_light);
 8000588:	2048      	movs	r0, #72	@ 0x48
 800058a:	f7ff fec9 	bl	8000320 <setLightH>
	        setLightV(red_light);
 800058e:	2045      	movs	r0, #69	@ 0x45
 8000590:	f7ff ff36 	bl	8000400 <setLightV>
	        if (timer == 0) {
 8000594:	4b1d      	ldr	r3, [pc, #116]	@ (800060c <auto_traffic+0x124>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d113      	bne.n	80005c4 <auto_traffic+0xdc>
	            traffic_status = NS_GREEN_EW_RED;
 800059c:	4b16      	ldr	r3, [pc, #88]	@ (80005f8 <auto_traffic+0x110>)
 800059e:	2202      	movs	r2, #2
 80005a0:	601a      	str	r2, [r3, #0]
	            ns_time_left = green_duration;
 80005a2:	4b16      	ldr	r3, [pc, #88]	@ (80005fc <auto_traffic+0x114>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a16      	ldr	r2, [pc, #88]	@ (8000600 <auto_traffic+0x118>)
 80005a8:	6013      	str	r3, [r2, #0]
	            ew_time_left = red_duration;
 80005aa:	4b16      	ldr	r3, [pc, #88]	@ (8000604 <auto_traffic+0x11c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a16      	ldr	r2, [pc, #88]	@ (8000608 <auto_traffic+0x120>)
 80005b0:	6013      	str	r3, [r2, #0]
	            timer = green_duration;
 80005b2:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <auto_traffic+0x114>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a15      	ldr	r2, [pc, #84]	@ (800060c <auto_traffic+0x124>)
 80005b8:	6013      	str	r3, [r2, #0]
	        }
	        break;
 80005ba:	e003      	b.n	80005c4 <auto_traffic+0xdc>
        break;
 80005bc:	bf00      	nop
 80005be:	e002      	b.n	80005c6 <auto_traffic+0xde>
	        break;
 80005c0:	bf00      	nop
 80005c2:	e000      	b.n	80005c6 <auto_traffic+0xde>
	        break;
 80005c4:	bf00      	nop
	}

	    ns_time_left--;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <auto_traffic+0x118>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000600 <auto_traffic+0x118>)
 80005ce:	6013      	str	r3, [r2, #0]
	    ew_time_left--;
 80005d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <auto_traffic+0x120>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3b01      	subs	r3, #1
 80005d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000608 <auto_traffic+0x120>)
 80005d8:	6013      	str	r3, [r2, #0]
	    timer--;
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <auto_traffic+0x124>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3b01      	subs	r3, #1
 80005e0:	4a0a      	ldr	r2, [pc, #40]	@ (800060c <auto_traffic+0x124>)
 80005e2:	6013      	str	r3, [r2, #0]
	    led1 = ns_time_left;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <auto_traffic+0x118>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000614 <auto_traffic+0x12c>)
 80005ea:	6013      	str	r3, [r2, #0]
	    led2 = ew_time_left;
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <auto_traffic+0x120>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a09      	ldr	r2, [pc, #36]	@ (8000618 <auto_traffic+0x130>)
 80005f2:	6013      	str	r3, [r2, #0]


}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000058 	.word	0x20000058
 80005fc:	20000040 	.word	0x20000040
 8000600:	200000c4 	.word	0x200000c4
 8000604:	2000003c 	.word	0x2000003c
 8000608:	200000c8 	.word	0x200000c8
 800060c:	200000c0 	.word	0x200000c0
 8000610:	20000044 	.word	0x20000044
 8000614:	200000b8 	.word	0x200000b8
 8000618:	200000bc 	.word	0x200000bc

0800061c <fsm_automatic_run>:





void fsm_automatic_run() {
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    // Update timers
	switch (status){
 8000620:	4b9d      	ldr	r3, [pc, #628]	@ (8000898 <fsm_automatic_run+0x27c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3b01      	subs	r3, #1
 8000626:	2b0d      	cmp	r3, #13
 8000628:	f200 81ff 	bhi.w	8000a2a <fsm_automatic_run+0x40e>
 800062c:	a201      	add	r2, pc, #4	@ (adr r2, 8000634 <fsm_automatic_run+0x18>)
 800062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000632:	bf00      	nop
 8000634:	0800066d 	.word	0x0800066d
 8000638:	08000a2b 	.word	0x08000a2b
 800063c:	08000a2b 	.word	0x08000a2b
 8000640:	08000a2b 	.word	0x08000a2b
 8000644:	08000a2b 	.word	0x08000a2b
 8000648:	08000a2b 	.word	0x08000a2b
 800064c:	08000a2b 	.word	0x08000a2b
 8000650:	08000a2b 	.word	0x08000a2b
 8000654:	08000a2b 	.word	0x08000a2b
 8000658:	08000a2b 	.word	0x08000a2b
 800065c:	08000a2b 	.word	0x08000a2b
 8000660:	080006cf 	.word	0x080006cf
 8000664:	08000799 	.word	0x08000799
 8000668:	080008d1 	.word	0x080008d1
	case INIT:
		if (isButtonPressed(0)){
 800066c:	2000      	movs	r0, #0
 800066e:	f7ff fd6d 	bl	800014c <isButtonPressed>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00b      	beq.n	8000690 <fsm_automatic_run+0x74>
			setLightH(red_light);
 8000678:	2045      	movs	r0, #69	@ 0x45
 800067a:	f7ff fe51 	bl	8000320 <setLightH>
			setLightV(red_light);
 800067e:	2045      	movs	r0, #69	@ 0x45
 8000680:	f7ff febe 	bl	8000400 <setLightV>
	        status = MAN_RED;
 8000684:	4b84      	ldr	r3, [pc, #528]	@ (8000898 <fsm_automatic_run+0x27c>)
 8000686:	220c      	movs	r2, #12
 8000688:	601a      	str	r2, [r3, #0]
	        timer4_flag = 1;
 800068a:	4b84      	ldr	r3, [pc, #528]	@ (800089c <fsm_automatic_run+0x280>)
 800068c:	2201      	movs	r2, #1
 800068e:	601a      	str	r2, [r3, #0]
		}

		if (timer1_flag == 1){
 8000690:	4b83      	ldr	r3, [pc, #524]	@ (80008a0 <fsm_automatic_run+0x284>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d105      	bne.n	80006a4 <fsm_automatic_run+0x88>
			auto_traffic();
 8000698:	f7ff ff26 	bl	80004e8 <auto_traffic>
			setTimer_1(1000);
 800069c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a0:	f000 fb08 	bl	8000cb4 <setTimer_1>
		}
		if (timer2_flag == 1){
 80006a4:	4b7f      	ldr	r3, [pc, #508]	@ (80008a4 <fsm_automatic_run+0x288>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	f040 81c0 	bne.w	8000a2e <fsm_automatic_run+0x412>
			//update7SEG(led_index);
			if (++led_index == 2) led_index = 0;
 80006ae:	4b7e      	ldr	r3, [pc, #504]	@ (80008a8 <fsm_automatic_run+0x28c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a7c      	ldr	r2, [pc, #496]	@ (80008a8 <fsm_automatic_run+0x28c>)
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b7b      	ldr	r3, [pc, #492]	@ (80008a8 <fsm_automatic_run+0x28c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d102      	bne.n	80006c6 <fsm_automatic_run+0xaa>
 80006c0:	4b79      	ldr	r3, [pc, #484]	@ (80008a8 <fsm_automatic_run+0x28c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
			setTimer_2(100);
 80006c6:	2064      	movs	r0, #100	@ 0x64
 80006c8:	f000 fb10 	bl	8000cec <setTimer_2>
		}
		break;
 80006cc:	e1af      	b.n	8000a2e <fsm_automatic_run+0x412>
	case MAN_RED:
		if (isButtonPressed(0)){
 80006ce:	2000      	movs	r0, #0
 80006d0:	f7ff fd3c 	bl	800014c <isButtonPressed>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d00b      	beq.n	80006f2 <fsm_automatic_run+0xd6>
			setLightH(yel_light);
 80006da:	2048      	movs	r0, #72	@ 0x48
 80006dc:	f7ff fe20 	bl	8000320 <setLightH>
			setLightV(yel_light);
 80006e0:	2048      	movs	r0, #72	@ 0x48
 80006e2:	f7ff fe8d 	bl	8000400 <setLightV>
	        status = MAN_YELLOW;
 80006e6:	4b6c      	ldr	r3, [pc, #432]	@ (8000898 <fsm_automatic_run+0x27c>)
 80006e8:	220d      	movs	r2, #13
 80006ea:	601a      	str	r2, [r3, #0]
	        timer4_flag = 1;
 80006ec:	4b6b      	ldr	r3, [pc, #428]	@ (800089c <fsm_automatic_run+0x280>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(1)){
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff fd2a 	bl	800014c <isButtonPressed>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d00b      	beq.n	8000716 <fsm_automatic_run+0xfa>
			temp_red++;
 80006fe:	4b6b      	ldr	r3, [pc, #428]	@ (80008ac <fsm_automatic_run+0x290>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	4a69      	ldr	r2, [pc, #420]	@ (80008ac <fsm_automatic_run+0x290>)
 8000706:	6013      	str	r3, [r2, #0]
			if (temp_red > 99) temp_red = 1;
 8000708:	4b68      	ldr	r3, [pc, #416]	@ (80008ac <fsm_automatic_run+0x290>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b63      	cmp	r3, #99	@ 0x63
 800070e:	dd02      	ble.n	8000716 <fsm_automatic_run+0xfa>
 8000710:	4b66      	ldr	r3, [pc, #408]	@ (80008ac <fsm_automatic_run+0x290>)
 8000712:	2201      	movs	r2, #1
 8000714:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(2)){
 8000716:	2002      	movs	r0, #2
 8000718:	f7ff fd18 	bl	800014c <isButtonPressed>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d006      	beq.n	8000730 <fsm_automatic_run+0x114>
			red_duration = temp_red;
 8000722:	4b62      	ldr	r3, [pc, #392]	@ (80008ac <fsm_automatic_run+0x290>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a62      	ldr	r2, [pc, #392]	@ (80008b0 <fsm_automatic_run+0x294>)
 8000728:	6013      	str	r3, [r2, #0]
			temp_red = 1;
 800072a:	4b60      	ldr	r3, [pc, #384]	@ (80008ac <fsm_automatic_run+0x290>)
 800072c:	2201      	movs	r2, #1
 800072e:	601a      	str	r2, [r3, #0]
		}

		if (timer2_flag == 1){
 8000730:	4b5c      	ldr	r3, [pc, #368]	@ (80008a4 <fsm_automatic_run+0x288>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d115      	bne.n	8000764 <fsm_automatic_run+0x148>
			led1 = 1;
 8000738:	4b5e      	ldr	r3, [pc, #376]	@ (80008b4 <fsm_automatic_run+0x298>)
 800073a:	2201      	movs	r2, #1
 800073c:	601a      	str	r2, [r3, #0]
			led2 = temp_red;
 800073e:	4b5b      	ldr	r3, [pc, #364]	@ (80008ac <fsm_automatic_run+0x290>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a5d      	ldr	r2, [pc, #372]	@ (80008b8 <fsm_automatic_run+0x29c>)
 8000744:	6013      	str	r3, [r2, #0]
			//updateLED();
			//update7SEG(led_index);
			if (++led_index == 2) led_index = 0;
 8000746:	4b58      	ldr	r3, [pc, #352]	@ (80008a8 <fsm_automatic_run+0x28c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	3301      	adds	r3, #1
 800074c:	4a56      	ldr	r2, [pc, #344]	@ (80008a8 <fsm_automatic_run+0x28c>)
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b55      	ldr	r3, [pc, #340]	@ (80008a8 <fsm_automatic_run+0x28c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b02      	cmp	r3, #2
 8000756:	d102      	bne.n	800075e <fsm_automatic_run+0x142>
 8000758:	4b53      	ldr	r3, [pc, #332]	@ (80008a8 <fsm_automatic_run+0x28c>)
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
			setTimer_2(100);
 800075e:	2064      	movs	r0, #100	@ 0x64
 8000760:	f000 fac4 	bl	8000cec <setTimer_2>
		}

		if (timer3_flag == 1){
 8000764:	4b55      	ldr	r3, [pc, #340]	@ (80008bc <fsm_automatic_run+0x2a0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	f040 8162 	bne.w	8000a32 <fsm_automatic_run+0x416>
			if (red_flag == 1) {
 800076e:	4b54      	ldr	r3, [pc, #336]	@ (80008c0 <fsm_automatic_run+0x2a4>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d106      	bne.n	8000784 <fsm_automatic_run+0x168>
				setLightH(0);
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff fdd2 	bl	8000320 <setLightH>
				setLightV(0); //turn off
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff fe3f 	bl	8000400 <setLightV>
 8000782:	e005      	b.n	8000790 <fsm_automatic_run+0x174>
			}
			else {
				setLightH(red_light);
 8000784:	2045      	movs	r0, #69	@ 0x45
 8000786:	f7ff fdcb 	bl	8000320 <setLightH>
				setLightV(red_light);
 800078a:	2045      	movs	r0, #69	@ 0x45
 800078c:	f7ff fe38 	bl	8000400 <setLightV>
			}
			setTimer_3(250);
 8000790:	20fa      	movs	r0, #250	@ 0xfa
 8000792:	f000 fac7 	bl	8000d24 <setTimer_3>
		}
		break;
 8000796:	e14c      	b.n	8000a32 <fsm_automatic_run+0x416>
	case MAN_YELLOW:
		if (isButtonPressed(0)){
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff fcd7 	bl	800014c <isButtonPressed>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d00b      	beq.n	80007bc <fsm_automatic_run+0x1a0>
	        setLightH(grn_light);
 80007a4:	200c      	movs	r0, #12
 80007a6:	f7ff fdbb 	bl	8000320 <setLightH>
	        setLightV(grn_light);
 80007aa:	200c      	movs	r0, #12
 80007ac:	f7ff fe28 	bl	8000400 <setLightV>
	        status = MAN_GREEN;
 80007b0:	4b39      	ldr	r3, [pc, #228]	@ (8000898 <fsm_automatic_run+0x27c>)
 80007b2:	220e      	movs	r2, #14
 80007b4:	601a      	str	r2, [r3, #0]
	        timer4_flag = 1;
 80007b6:	4b39      	ldr	r3, [pc, #228]	@ (800089c <fsm_automatic_run+0x280>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	601a      	str	r2, [r3, #0]
		}

		if (timer2_flag == 1){
 80007bc:	4b39      	ldr	r3, [pc, #228]	@ (80008a4 <fsm_automatic_run+0x288>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d115      	bne.n	80007f0 <fsm_automatic_run+0x1d4>
			led1 = 2;
 80007c4:	4b3b      	ldr	r3, [pc, #236]	@ (80008b4 <fsm_automatic_run+0x298>)
 80007c6:	2202      	movs	r2, #2
 80007c8:	601a      	str	r2, [r3, #0]
			led2 = temp_yellow;
 80007ca:	4b3e      	ldr	r3, [pc, #248]	@ (80008c4 <fsm_automatic_run+0x2a8>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a3a      	ldr	r2, [pc, #232]	@ (80008b8 <fsm_automatic_run+0x29c>)
 80007d0:	6013      	str	r3, [r2, #0]
			//updateLED();
			//update7SEG(led_index);
			if (++led_index == 2) led_index = 0;
 80007d2:	4b35      	ldr	r3, [pc, #212]	@ (80008a8 <fsm_automatic_run+0x28c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	4a33      	ldr	r2, [pc, #204]	@ (80008a8 <fsm_automatic_run+0x28c>)
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b32      	ldr	r3, [pc, #200]	@ (80008a8 <fsm_automatic_run+0x28c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d102      	bne.n	80007ea <fsm_automatic_run+0x1ce>
 80007e4:	4b30      	ldr	r3, [pc, #192]	@ (80008a8 <fsm_automatic_run+0x28c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
			setTimer_2(100);
 80007ea:	2064      	movs	r0, #100	@ 0x64
 80007ec:	f000 fa7e 	bl	8000cec <setTimer_2>
		}

		if (isButtonLongPressed(1)){
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff fcc5 	bl	8000180 <isButtonLongPressed>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d013      	beq.n	8000824 <fsm_automatic_run+0x208>
			if (timer4_flag == 1){
 80007fc:	4b27      	ldr	r3, [pc, #156]	@ (800089c <fsm_automatic_run+0x280>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d10f      	bne.n	8000824 <fsm_automatic_run+0x208>
				temp_yellow++;
 8000804:	4b2f      	ldr	r3, [pc, #188]	@ (80008c4 <fsm_automatic_run+0x2a8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	4a2e      	ldr	r2, [pc, #184]	@ (80008c4 <fsm_automatic_run+0x2a8>)
 800080c:	6013      	str	r3, [r2, #0]
				if (temp_yellow > 99) temp_yellow = 1;
 800080e:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <fsm_automatic_run+0x2a8>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b63      	cmp	r3, #99	@ 0x63
 8000814:	dd02      	ble.n	800081c <fsm_automatic_run+0x200>
 8000816:	4b2b      	ldr	r3, [pc, #172]	@ (80008c4 <fsm_automatic_run+0x2a8>)
 8000818:	2201      	movs	r2, #1
 800081a:	601a      	str	r2, [r3, #0]
				setTimer_4(500);
 800081c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000820:	f000 fa9c 	bl	8000d5c <setTimer_4>
			}
		}

		if (isButtonPressed(1)){
 8000824:	2001      	movs	r0, #1
 8000826:	f7ff fc91 	bl	800014c <isButtonPressed>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00b      	beq.n	8000848 <fsm_automatic_run+0x22c>
			temp_yellow++;
 8000830:	4b24      	ldr	r3, [pc, #144]	@ (80008c4 <fsm_automatic_run+0x2a8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	4a23      	ldr	r2, [pc, #140]	@ (80008c4 <fsm_automatic_run+0x2a8>)
 8000838:	6013      	str	r3, [r2, #0]
			if (temp_yellow > 99) temp_yellow = 1;
 800083a:	4b22      	ldr	r3, [pc, #136]	@ (80008c4 <fsm_automatic_run+0x2a8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b63      	cmp	r3, #99	@ 0x63
 8000840:	dd02      	ble.n	8000848 <fsm_automatic_run+0x22c>
 8000842:	4b20      	ldr	r3, [pc, #128]	@ (80008c4 <fsm_automatic_run+0x2a8>)
 8000844:	2201      	movs	r2, #1
 8000846:	601a      	str	r2, [r3, #0]
		}



		if (isButtonPressed(2)){
 8000848:	2002      	movs	r0, #2
 800084a:	f7ff fc7f 	bl	800014c <isButtonPressed>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d006      	beq.n	8000862 <fsm_automatic_run+0x246>
			yellow_duration = temp_yellow;
 8000854:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <fsm_automatic_run+0x2a8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a1b      	ldr	r2, [pc, #108]	@ (80008c8 <fsm_automatic_run+0x2ac>)
 800085a:	6013      	str	r3, [r2, #0]
			temp_yellow = 1;
 800085c:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <fsm_automatic_run+0x2a8>)
 800085e:	2201      	movs	r2, #1
 8000860:	601a      	str	r2, [r3, #0]
		}

		if (timer3_flag == 1){
 8000862:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <fsm_automatic_run+0x2a0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	f040 80e5 	bne.w	8000a36 <fsm_automatic_run+0x41a>
			if (yel_flag == 1) {
 800086c:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <fsm_automatic_run+0x2b0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d106      	bne.n	8000882 <fsm_automatic_run+0x266>
				setLightH(0);
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff fd53 	bl	8000320 <setLightH>
				setLightV(0); //turn off
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff fdc0 	bl	8000400 <setLightV>
 8000880:	e005      	b.n	800088e <fsm_automatic_run+0x272>
			}
			else {
			setLightH(yel_light);
 8000882:	2048      	movs	r0, #72	@ 0x48
 8000884:	f7ff fd4c 	bl	8000320 <setLightH>
			setLightV(yel_light);
 8000888:	2048      	movs	r0, #72	@ 0x48
 800088a:	f7ff fdb9 	bl	8000400 <setLightV>
			}
			setTimer_3(250);
 800088e:	20fa      	movs	r0, #250	@ 0xfa
 8000890:	f000 fa48 	bl	8000d24 <setTimer_3>
		}
		break;
 8000894:	e0cf      	b.n	8000a36 <fsm_automatic_run+0x41a>
 8000896:	bf00      	nop
 8000898:	20000054 	.word	0x20000054
 800089c:	20000068 	.word	0x20000068
 80008a0:	2000005c 	.word	0x2000005c
 80008a4:	20000060 	.word	0x20000060
 80008a8:	200000d0 	.word	0x200000d0
 80008ac:	20000048 	.word	0x20000048
 80008b0:	2000003c 	.word	0x2000003c
 80008b4:	200000b8 	.word	0x200000b8
 80008b8:	200000bc 	.word	0x200000bc
 80008bc:	20000064 	.word	0x20000064
 80008c0:	200000ac 	.word	0x200000ac
 80008c4:	20000050 	.word	0x20000050
 80008c8:	20000044 	.word	0x20000044
 80008cc:	200000b4 	.word	0x200000b4
	case MAN_GREEN:
		if (isButtonPressed(0)){
 80008d0:	2000      	movs	r0, #0
 80008d2:	f7ff fc3b 	bl	800014c <isButtonPressed>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d03a      	beq.n	8000952 <fsm_automatic_run+0x336>
			//Swap yellow and green
			if (yellow_duration > green_duration) {
 80008dc:	4b58      	ldr	r3, [pc, #352]	@ (8000a40 <fsm_automatic_run+0x424>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b58      	ldr	r3, [pc, #352]	@ (8000a44 <fsm_automatic_run+0x428>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dd0b      	ble.n	8000900 <fsm_automatic_run+0x2e4>
				forfun = yellow_duration;
 80008e8:	4b55      	ldr	r3, [pc, #340]	@ (8000a40 <fsm_automatic_run+0x424>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a56      	ldr	r2, [pc, #344]	@ (8000a48 <fsm_automatic_run+0x42c>)
 80008ee:	6013      	str	r3, [r2, #0]
				yellow_duration = green_duration;
 80008f0:	4b54      	ldr	r3, [pc, #336]	@ (8000a44 <fsm_automatic_run+0x428>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a52      	ldr	r2, [pc, #328]	@ (8000a40 <fsm_automatic_run+0x424>)
 80008f6:	6013      	str	r3, [r2, #0]
				green_duration = forfun;
 80008f8:	4b53      	ldr	r3, [pc, #332]	@ (8000a48 <fsm_automatic_run+0x42c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a51      	ldr	r2, [pc, #324]	@ (8000a44 <fsm_automatic_run+0x428>)
 80008fe:	6013      	str	r3, [r2, #0]
			}
			if (red_duration < green_duration + yellow_duration){
 8000900:	4b50      	ldr	r3, [pc, #320]	@ (8000a44 <fsm_automatic_run+0x428>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b4e      	ldr	r3, [pc, #312]	@ (8000a40 <fsm_automatic_run+0x424>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	441a      	add	r2, r3
 800090a:	4b50      	ldr	r3, [pc, #320]	@ (8000a4c <fsm_automatic_run+0x430>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	429a      	cmp	r2, r3
 8000910:	dd06      	ble.n	8000920 <fsm_automatic_run+0x304>
				red_duration = green_duration + yellow_duration;
 8000912:	4b4c      	ldr	r3, [pc, #304]	@ (8000a44 <fsm_automatic_run+0x428>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	4b4a      	ldr	r3, [pc, #296]	@ (8000a40 <fsm_automatic_run+0x424>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a4b      	ldr	r2, [pc, #300]	@ (8000a4c <fsm_automatic_run+0x430>)
 800091e:	6013      	str	r3, [r2, #0]
			}
			if (red_duration >= green_duration + yellow_duration){
 8000920:	4b48      	ldr	r3, [pc, #288]	@ (8000a44 <fsm_automatic_run+0x428>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b46      	ldr	r3, [pc, #280]	@ (8000a40 <fsm_automatic_run+0x424>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	441a      	add	r2, r3
 800092a:	4b48      	ldr	r3, [pc, #288]	@ (8000a4c <fsm_automatic_run+0x430>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	429a      	cmp	r2, r3
 8000930:	dc06      	bgt.n	8000940 <fsm_automatic_run+0x324>
				green_duration = red_duration - yellow_duration;
 8000932:	4b46      	ldr	r3, [pc, #280]	@ (8000a4c <fsm_automatic_run+0x430>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	4b42      	ldr	r3, [pc, #264]	@ (8000a40 <fsm_automatic_run+0x424>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	4a41      	ldr	r2, [pc, #260]	@ (8000a44 <fsm_automatic_run+0x428>)
 800093e:	6013      	str	r3, [r2, #0]
			}
			status = INIT;
 8000940:	4b43      	ldr	r3, [pc, #268]	@ (8000a50 <fsm_automatic_run+0x434>)
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]
			traffic_status = INIT;
 8000946:	4b43      	ldr	r3, [pc, #268]	@ (8000a54 <fsm_automatic_run+0x438>)
 8000948:	2201      	movs	r2, #1
 800094a:	601a      	str	r2, [r3, #0]
	        timer4_flag = 1;
 800094c:	4b42      	ldr	r3, [pc, #264]	@ (8000a58 <fsm_automatic_run+0x43c>)
 800094e:	2201      	movs	r2, #1
 8000950:	601a      	str	r2, [r3, #0]
		}

		if (isButtonLongPressed(1)){
 8000952:	2001      	movs	r0, #1
 8000954:	f7ff fc14 	bl	8000180 <isButtonLongPressed>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d013      	beq.n	8000986 <fsm_automatic_run+0x36a>
			if (timer4_flag == 1){
 800095e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a58 <fsm_automatic_run+0x43c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d10f      	bne.n	8000986 <fsm_automatic_run+0x36a>
				temp_green++;
 8000966:	4b3d      	ldr	r3, [pc, #244]	@ (8000a5c <fsm_automatic_run+0x440>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3301      	adds	r3, #1
 800096c:	4a3b      	ldr	r2, [pc, #236]	@ (8000a5c <fsm_automatic_run+0x440>)
 800096e:	6013      	str	r3, [r2, #0]
				if (temp_green > 99) temp_green = 1;
 8000970:	4b3a      	ldr	r3, [pc, #232]	@ (8000a5c <fsm_automatic_run+0x440>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b63      	cmp	r3, #99	@ 0x63
 8000976:	dd02      	ble.n	800097e <fsm_automatic_run+0x362>
 8000978:	4b38      	ldr	r3, [pc, #224]	@ (8000a5c <fsm_automatic_run+0x440>)
 800097a:	2201      	movs	r2, #1
 800097c:	601a      	str	r2, [r3, #0]
				setTimer_4(500);
 800097e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000982:	f000 f9eb 	bl	8000d5c <setTimer_4>
			}
		}

		if (isButtonPressed(1)){
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff fbe0 	bl	800014c <isButtonPressed>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d00b      	beq.n	80009aa <fsm_automatic_run+0x38e>
			temp_green++;
 8000992:	4b32      	ldr	r3, [pc, #200]	@ (8000a5c <fsm_automatic_run+0x440>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	4a30      	ldr	r2, [pc, #192]	@ (8000a5c <fsm_automatic_run+0x440>)
 800099a:	6013      	str	r3, [r2, #0]
			if (temp_green > 99) temp_green = 1;
 800099c:	4b2f      	ldr	r3, [pc, #188]	@ (8000a5c <fsm_automatic_run+0x440>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b63      	cmp	r3, #99	@ 0x63
 80009a2:	dd02      	ble.n	80009aa <fsm_automatic_run+0x38e>
 80009a4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <fsm_automatic_run+0x440>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	601a      	str	r2, [r3, #0]
		}



		if (isButtonPressed(2)){
 80009aa:	2002      	movs	r0, #2
 80009ac:	f7ff fbce 	bl	800014c <isButtonPressed>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d006      	beq.n	80009c4 <fsm_automatic_run+0x3a8>
			green_duration = temp_green;
 80009b6:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <fsm_automatic_run+0x440>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a22      	ldr	r2, [pc, #136]	@ (8000a44 <fsm_automatic_run+0x428>)
 80009bc:	6013      	str	r3, [r2, #0]
			temp_green = 1;
 80009be:	4b27      	ldr	r3, [pc, #156]	@ (8000a5c <fsm_automatic_run+0x440>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
		}

		if (timer2_flag == 1){
 80009c4:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <fsm_automatic_run+0x444>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d115      	bne.n	80009f8 <fsm_automatic_run+0x3dc>
			led1 = 3;
 80009cc:	4b25      	ldr	r3, [pc, #148]	@ (8000a64 <fsm_automatic_run+0x448>)
 80009ce:	2203      	movs	r2, #3
 80009d0:	601a      	str	r2, [r3, #0]
			led2 = temp_green;
 80009d2:	4b22      	ldr	r3, [pc, #136]	@ (8000a5c <fsm_automatic_run+0x440>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a24      	ldr	r2, [pc, #144]	@ (8000a68 <fsm_automatic_run+0x44c>)
 80009d8:	6013      	str	r3, [r2, #0]
			//updateLED();
			//update7SEG(led_index);
			if (++led_index == 2) led_index = 0;
 80009da:	4b24      	ldr	r3, [pc, #144]	@ (8000a6c <fsm_automatic_run+0x450>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	4a22      	ldr	r2, [pc, #136]	@ (8000a6c <fsm_automatic_run+0x450>)
 80009e2:	6013      	str	r3, [r2, #0]
 80009e4:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <fsm_automatic_run+0x450>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d102      	bne.n	80009f2 <fsm_automatic_run+0x3d6>
 80009ec:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <fsm_automatic_run+0x450>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
			setTimer_2(100);
 80009f2:	2064      	movs	r0, #100	@ 0x64
 80009f4:	f000 f97a 	bl	8000cec <setTimer_2>
		}

		if (timer3_flag == 1){
 80009f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <fsm_automatic_run+0x454>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d11c      	bne.n	8000a3a <fsm_automatic_run+0x41e>
			if (grn_flag == 1) {
 8000a00:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <fsm_automatic_run+0x458>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d106      	bne.n	8000a16 <fsm_automatic_run+0x3fa>
				setLightH(0);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f7ff fc89 	bl	8000320 <setLightH>
				setLightV(0); //turn off
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f7ff fcf6 	bl	8000400 <setLightV>
 8000a14:	e005      	b.n	8000a22 <fsm_automatic_run+0x406>
			}
			else {
				setLightH(grn_light);
 8000a16:	200c      	movs	r0, #12
 8000a18:	f7ff fc82 	bl	8000320 <setLightH>
				setLightV(grn_light);
 8000a1c:	200c      	movs	r0, #12
 8000a1e:	f7ff fcef 	bl	8000400 <setLightV>
			}
			setTimer_3(250);
 8000a22:	20fa      	movs	r0, #250	@ 0xfa
 8000a24:	f000 f97e 	bl	8000d24 <setTimer_3>
		}
		break;
 8000a28:	e007      	b.n	8000a3a <fsm_automatic_run+0x41e>
	default:
		break;
 8000a2a:	bf00      	nop
 8000a2c:	e006      	b.n	8000a3c <fsm_automatic_run+0x420>
		break;
 8000a2e:	bf00      	nop
 8000a30:	e004      	b.n	8000a3c <fsm_automatic_run+0x420>
		break;
 8000a32:	bf00      	nop
 8000a34:	e002      	b.n	8000a3c <fsm_automatic_run+0x420>
		break;
 8000a36:	bf00      	nop
 8000a38:	e000      	b.n	8000a3c <fsm_automatic_run+0x420>
		break;
 8000a3a:	bf00      	nop
	}


}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000044 	.word	0x20000044
 8000a44:	20000040 	.word	0x20000040
 8000a48:	200000cc 	.word	0x200000cc
 8000a4c:	2000003c 	.word	0x2000003c
 8000a50:	20000054 	.word	0x20000054
 8000a54:	20000058 	.word	0x20000058
 8000a58:	20000068 	.word	0x20000068
 8000a5c:	2000004c 	.word	0x2000004c
 8000a60:	20000060 	.word	0x20000060
 8000a64:	200000b8 	.word	0x200000b8
 8000a68:	200000bc 	.word	0x200000bc
 8000a6c:	200000d0 	.word	0x200000d0
 8000a70:	20000064 	.word	0x20000064
 8000a74:	200000b0 	.word	0x200000b0

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f000 faa4 	bl	8000fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f80e 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f000 f894 	bl	8000bb0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a88:	f000 f846 	bl	8000b18 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <main+0x24>)
 8000a8e:	f001 f9ed 	bl	8001e6c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_automatic_run();
 8000a92:	f7ff fdc3 	bl	800061c <fsm_automatic_run>
  {
 8000a96:	bf00      	nop
 8000a98:	e7fb      	b.n	8000a92 <main+0x1a>
 8000a9a:	bf00      	nop
 8000a9c:	200000d4 	.word	0x200000d4

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b090      	sub	sp, #64	@ 0x40
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0318 	add.w	r3, r7, #24
 8000aaa:	2228      	movs	r2, #40	@ 0x28
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 fd7e 	bl	80025b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aca:	2310      	movs	r3, #16
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0318 	add.w	r3, r7, #24
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fd9a 	bl	8001610 <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f8e1 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 f808 	bl	8001b14 <HAL_RCC_ClockConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b0a:	f000 f8cd 	bl	8000ca8 <Error_Handler>
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3740      	adds	r7, #64	@ 0x40
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b3e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000b42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b4c:	2209      	movs	r2, #9
 8000b4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b5c:	4813      	ldr	r0, [pc, #76]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b5e:	f001 f935 	bl	8001dcc <HAL_TIM_Base_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b68:	f000 f89e 	bl	8000ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	4619      	mov	r1, r3
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b7a:	f001 fab9 	bl	80020f0 <HAL_TIM_ConfigClockSource>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b84:	f000 f890 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b90:	463b      	mov	r3, r7
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_TIM2_Init+0x94>)
 8000b96:	f001 fc9b 	bl	80024d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ba0:	f000 f882 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200000d4 	.word	0x200000d4

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc4:	4b34      	ldr	r3, [pc, #208]	@ (8000c98 <MX_GPIO_Init+0xe8>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a33      	ldr	r2, [pc, #204]	@ (8000c98 <MX_GPIO_Init+0xe8>)
 8000bca:	f043 0308 	orr.w	r3, r3, #8
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <MX_GPIO_Init+0xe8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0308 	and.w	r3, r3, #8
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c98 <MX_GPIO_Init+0xe8>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a2d      	ldr	r2, [pc, #180]	@ (8000c98 <MX_GPIO_Init+0xe8>)
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c98 <MX_GPIO_Init+0xe8>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0310 	and.w	r3, r3, #16
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b28      	ldr	r3, [pc, #160]	@ (8000c98 <MX_GPIO_Init+0xe8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a27      	ldr	r2, [pc, #156]	@ (8000c98 <MX_GPIO_Init+0xe8>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <MX_GPIO_Init+0xe8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HA_Pin|HB_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8000c12:	4822      	ldr	r0, [pc, #136]	@ (8000c9c <MX_GPIO_Init+0xec>)
 8000c14:	f000 fce3 	bl	80015de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VA_Pin|VB_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000c1e:	4820      	ldr	r0, [pc, #128]	@ (8000ca0 <MX_GPIO_Init+0xf0>)
 8000c20:	f000 fcdd 	bl	80015de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HA_Pin HB_Pin */
  GPIO_InitStruct.Pin = HA_Pin|HB_Pin;
 8000c24:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4817      	ldr	r0, [pc, #92]	@ (8000c9c <MX_GPIO_Init+0xec>)
 8000c3e:	f000 fb33 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_BUTTON_Pin */
  GPIO_InitStruct.Pin = L_BUTTON_Pin;
 8000c42:	2380      	movs	r3, #128	@ 0x80
 8000c44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	4619      	mov	r1, r3
 8000c54:	4813      	ldr	r0, [pc, #76]	@ (8000ca4 <MX_GPIO_Init+0xf4>)
 8000c56:	f000 fb27 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VA_Pin VB_Pin */
  GPIO_InitStruct.Pin = VA_Pin|VB_Pin;
 8000c5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	4619      	mov	r1, r3
 8000c72:	480b      	ldr	r0, [pc, #44]	@ (8000ca0 <MX_GPIO_Init+0xf0>)
 8000c74:	f000 fb18 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_BUTTON_Pin N_BUTTON_Pin */
  GPIO_InitStruct.Pin = Y_BUTTON_Pin|N_BUTTON_Pin;
 8000c78:	2360      	movs	r3, #96	@ 0x60
 8000c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4804      	ldr	r0, [pc, #16]	@ (8000c9c <MX_GPIO_Init+0xec>)
 8000c8c:	f000 fb0c 	bl	80012a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c90:	bf00      	nop
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010c00 	.word	0x40010c00
 8000ca0:	40010800 	.word	0x40010800
 8000ca4:	40011000 	.word	0x40011000

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <Error_Handler+0x8>

08000cb4 <setTimer_1>:
int timer1_flag = 1;
int timer2_flag = 1;
int timer3_flag = 1;
int timer4_flag = 1;

void setTimer_1(int duration){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
    timer1_counter = duration/CLOCK_PERIOD;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a08      	ldr	r2, [pc, #32]	@ (8000ce0 <setTimer_1+0x2c>)
 8000cc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc4:	1092      	asrs	r2, r2, #2
 8000cc6:	17db      	asrs	r3, r3, #31
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	4a06      	ldr	r2, [pc, #24]	@ (8000ce4 <setTimer_1+0x30>)
 8000ccc:	6013      	str	r3, [r2, #0]
    timer1_flag = 0;
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <setTimer_1+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	66666667 	.word	0x66666667
 8000ce4:	2000011c 	.word	0x2000011c
 8000ce8:	2000005c 	.word	0x2000005c

08000cec <setTimer_2>:

void setTimer_2(int duration){
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
    timer2_counter = duration/CLOCK_PERIOD;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a08      	ldr	r2, [pc, #32]	@ (8000d18 <setTimer_2+0x2c>)
 8000cf8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cfc:	1092      	asrs	r2, r2, #2
 8000cfe:	17db      	asrs	r3, r3, #31
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	4a06      	ldr	r2, [pc, #24]	@ (8000d1c <setTimer_2+0x30>)
 8000d04:	6013      	str	r3, [r2, #0]
    timer2_flag = 0;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <setTimer_2+0x34>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	66666667 	.word	0x66666667
 8000d1c:	20000120 	.word	0x20000120
 8000d20:	20000060 	.word	0x20000060

08000d24 <setTimer_3>:

void setTimer_3(int duration){
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    timer3_counter = duration/CLOCK_PERIOD;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a08      	ldr	r2, [pc, #32]	@ (8000d50 <setTimer_3+0x2c>)
 8000d30:	fb82 1203 	smull	r1, r2, r2, r3
 8000d34:	1092      	asrs	r2, r2, #2
 8000d36:	17db      	asrs	r3, r3, #31
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	4a06      	ldr	r2, [pc, #24]	@ (8000d54 <setTimer_3+0x30>)
 8000d3c:	6013      	str	r3, [r2, #0]
    timer3_flag = 0;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <setTimer_3+0x34>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	66666667 	.word	0x66666667
 8000d54:	20000124 	.word	0x20000124
 8000d58:	20000064 	.word	0x20000064

08000d5c <setTimer_4>:

void setTimer_4(int duration){
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
    timer4_counter = duration/CLOCK_PERIOD;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a08      	ldr	r2, [pc, #32]	@ (8000d88 <setTimer_4+0x2c>)
 8000d68:	fb82 1203 	smull	r1, r2, r2, r3
 8000d6c:	1092      	asrs	r2, r2, #2
 8000d6e:	17db      	asrs	r3, r3, #31
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	4a06      	ldr	r2, [pc, #24]	@ (8000d8c <setTimer_4+0x30>)
 8000d74:	6013      	str	r3, [r2, #0]
    timer4_flag = 0;
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <setTimer_4+0x34>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	66666667 	.word	0x66666667
 8000d8c:	20000128 	.word	0x20000128
 8000d90:	20000068 	.word	0x20000068

08000d94 <timer_run>:

void timer_run(){
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
    if (timer1_counter > 0){
 8000d98:	4b21      	ldr	r3, [pc, #132]	@ (8000e20 <timer_run+0x8c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	dd0b      	ble.n	8000db8 <timer_run+0x24>
        timer1_counter--;
 8000da0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <timer_run+0x8c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e20 <timer_run+0x8c>)
 8000da8:	6013      	str	r3, [r2, #0]
        if (timer1_counter == 0){
 8000daa:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <timer_run+0x8c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d102      	bne.n	8000db8 <timer_run+0x24>
            timer1_flag = 1;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <timer_run+0x90>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
        }
    }
    if (timer2_counter > 0){
 8000db8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <timer_run+0x94>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	dd0b      	ble.n	8000dd8 <timer_run+0x44>
        timer2_counter--;
 8000dc0:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <timer_run+0x94>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	4a18      	ldr	r2, [pc, #96]	@ (8000e28 <timer_run+0x94>)
 8000dc8:	6013      	str	r3, [r2, #0]
        if (timer2_counter == 0){
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <timer_run+0x94>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d102      	bne.n	8000dd8 <timer_run+0x44>
            timer2_flag = 1;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <timer_run+0x98>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
        }
    }
    if (timer3_counter > 0){
 8000dd8:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <timer_run+0x9c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	dd0b      	ble.n	8000df8 <timer_run+0x64>
        timer3_counter--;
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <timer_run+0x9c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3b01      	subs	r3, #1
 8000de6:	4a12      	ldr	r2, [pc, #72]	@ (8000e30 <timer_run+0x9c>)
 8000de8:	6013      	str	r3, [r2, #0]
        if (timer3_counter == 0){
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <timer_run+0x9c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <timer_run+0x64>
            timer3_flag = 1;
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <timer_run+0xa0>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]
        }
    }
    if (timer4_counter > 0){
 8000df8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <timer_run+0xa4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	dd0b      	ble.n	8000e18 <timer_run+0x84>
        timer4_counter--;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <timer_run+0xa4>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	4a0c      	ldr	r2, [pc, #48]	@ (8000e38 <timer_run+0xa4>)
 8000e08:	6013      	str	r3, [r2, #0]
        if (timer4_counter == 0){
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <timer_run+0xa4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d102      	bne.n	8000e18 <timer_run+0x84>
            timer4_flag = 1;
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <timer_run+0xa8>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	601a      	str	r2, [r3, #0]
        }
    }
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	2000011c 	.word	0x2000011c
 8000e24:	2000005c 	.word	0x2000005c
 8000e28:	20000120 	.word	0x20000120
 8000e2c:	20000060 	.word	0x20000060
 8000e30:	20000124 	.word	0x20000124
 8000e34:	20000064 	.word	0x20000064
 8000e38:	20000128 	.word	0x20000128
 8000e3c:	20000068 	.word	0x20000068

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <HAL_MspInit+0x5c>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	4a14      	ldr	r2, [pc, #80]	@ (8000e9c <HAL_MspInit+0x5c>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6193      	str	r3, [r2, #24]
 8000e52:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_MspInit+0x5c>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <HAL_MspInit+0x5c>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4a0e      	ldr	r2, [pc, #56]	@ (8000e9c <HAL_MspInit+0x5c>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e68:	61d3      	str	r3, [r2, #28]
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <HAL_MspInit+0x5c>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <HAL_MspInit+0x60>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <HAL_MspInit+0x60>)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000

08000ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000eb4:	d113      	bne.n	8000ede <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <HAL_TIM_Base_MspInit+0x44>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee8 <HAL_TIM_Base_MspInit+0x44>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <HAL_TIM_Base_MspInit+0x44>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	201c      	movs	r0, #28
 8000ed4:	f000 f9b1 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ed8:	201c      	movs	r0, #28
 8000eda:	f000 f9ca 	bl	8001272 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3c:	f000 f88a 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <TIM2_IRQHandler+0x10>)
 8000f4a:	f000 ffe1 	bl	8001f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200000d4 	.word	0x200000d4

08000f58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "software_timer.h"
#include "button.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    timer_run();
 8000f6c:	f7ff ff12 	bl	8000d94 <timer_run>
    getKeyInput();
 8000f70:	f7ff f920 	bl	80001b4 <getKeyInput>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f7c:	f7ff ffec 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	480b      	ldr	r0, [pc, #44]	@ (8000fb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f82:	490c      	ldr	r1, [pc, #48]	@ (8000fb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f84:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a09      	ldr	r2, [pc, #36]	@ (8000fbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f98:	4c09      	ldr	r4, [pc, #36]	@ (8000fc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f001 fb0b 	bl	80025c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000faa:	f7ff fd65 	bl	8000a78 <main>
  bx lr
 8000fae:	4770      	bx	lr
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000fb8:	0800264c 	.word	0x0800264c
  ldr r2, =_sbss
 8000fbc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000fc0:	20000130 	.word	0x20000130

08000fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC1_2_IRQHandler>
	...

08000fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <HAL_Init+0x28>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	@ (8000ff0 <HAL_Init+0x28>)
 8000fd2:	f043 0310 	orr.w	r3, r3, #16
 8000fd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f923 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	200f      	movs	r0, #15
 8000fe0:	f000 f808 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff ff2c 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40022000 	.word	0x40022000

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_InitTick+0x54>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <HAL_InitTick+0x58>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f93b 	bl	800128e <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f903 	bl	800123a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	@ (8001050 <HAL_InitTick+0x5c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000006c 	.word	0x2000006c
 800104c:	20000074 	.word	0x20000074
 8001050:	20000070 	.word	0x20000070

08001054 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <HAL_IncTick+0x1c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <HAL_IncTick+0x20>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a03      	ldr	r2, [pc, #12]	@ (8001074 <HAL_IncTick+0x20>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	20000074 	.word	0x20000074
 8001074:	2000012c 	.word	0x2000012c

08001078 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b02      	ldr	r3, [pc, #8]	@ (8001088 <HAL_GetTick+0x10>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	2000012c 	.word	0x2000012c

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4906      	ldr	r1, [pc, #24]	@ (8001124 <__NVIC_EnableIRQ+0x34>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	@ (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	@ (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	@ 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	@ 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f7ff ff90 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff2d 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff42 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff90 	bl	800117c <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5f 	bl	8001128 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff35 	bl	80010f0 <__NVIC_EnableIRQ>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffa2 	bl	80011e0 <SysTick_Config>
 800129c:	4603      	mov	r3, r0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b08b      	sub	sp, #44	@ 0x2c
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ba:	e169      	b.n	8001590 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012bc:	2201      	movs	r2, #1
 80012be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	f040 8158 	bne.w	800158a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4a9a      	ldr	r2, [pc, #616]	@ (8001548 <HAL_GPIO_Init+0x2a0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d05e      	beq.n	80013a2 <HAL_GPIO_Init+0xfa>
 80012e4:	4a98      	ldr	r2, [pc, #608]	@ (8001548 <HAL_GPIO_Init+0x2a0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d875      	bhi.n	80013d6 <HAL_GPIO_Init+0x12e>
 80012ea:	4a98      	ldr	r2, [pc, #608]	@ (800154c <HAL_GPIO_Init+0x2a4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d058      	beq.n	80013a2 <HAL_GPIO_Init+0xfa>
 80012f0:	4a96      	ldr	r2, [pc, #600]	@ (800154c <HAL_GPIO_Init+0x2a4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d86f      	bhi.n	80013d6 <HAL_GPIO_Init+0x12e>
 80012f6:	4a96      	ldr	r2, [pc, #600]	@ (8001550 <HAL_GPIO_Init+0x2a8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d052      	beq.n	80013a2 <HAL_GPIO_Init+0xfa>
 80012fc:	4a94      	ldr	r2, [pc, #592]	@ (8001550 <HAL_GPIO_Init+0x2a8>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d869      	bhi.n	80013d6 <HAL_GPIO_Init+0x12e>
 8001302:	4a94      	ldr	r2, [pc, #592]	@ (8001554 <HAL_GPIO_Init+0x2ac>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d04c      	beq.n	80013a2 <HAL_GPIO_Init+0xfa>
 8001308:	4a92      	ldr	r2, [pc, #584]	@ (8001554 <HAL_GPIO_Init+0x2ac>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d863      	bhi.n	80013d6 <HAL_GPIO_Init+0x12e>
 800130e:	4a92      	ldr	r2, [pc, #584]	@ (8001558 <HAL_GPIO_Init+0x2b0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d046      	beq.n	80013a2 <HAL_GPIO_Init+0xfa>
 8001314:	4a90      	ldr	r2, [pc, #576]	@ (8001558 <HAL_GPIO_Init+0x2b0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d85d      	bhi.n	80013d6 <HAL_GPIO_Init+0x12e>
 800131a:	2b12      	cmp	r3, #18
 800131c:	d82a      	bhi.n	8001374 <HAL_GPIO_Init+0xcc>
 800131e:	2b12      	cmp	r3, #18
 8001320:	d859      	bhi.n	80013d6 <HAL_GPIO_Init+0x12e>
 8001322:	a201      	add	r2, pc, #4	@ (adr r2, 8001328 <HAL_GPIO_Init+0x80>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	080013a3 	.word	0x080013a3
 800132c:	0800137d 	.word	0x0800137d
 8001330:	0800138f 	.word	0x0800138f
 8001334:	080013d1 	.word	0x080013d1
 8001338:	080013d7 	.word	0x080013d7
 800133c:	080013d7 	.word	0x080013d7
 8001340:	080013d7 	.word	0x080013d7
 8001344:	080013d7 	.word	0x080013d7
 8001348:	080013d7 	.word	0x080013d7
 800134c:	080013d7 	.word	0x080013d7
 8001350:	080013d7 	.word	0x080013d7
 8001354:	080013d7 	.word	0x080013d7
 8001358:	080013d7 	.word	0x080013d7
 800135c:	080013d7 	.word	0x080013d7
 8001360:	080013d7 	.word	0x080013d7
 8001364:	080013d7 	.word	0x080013d7
 8001368:	080013d7 	.word	0x080013d7
 800136c:	08001385 	.word	0x08001385
 8001370:	08001399 	.word	0x08001399
 8001374:	4a79      	ldr	r2, [pc, #484]	@ (800155c <HAL_GPIO_Init+0x2b4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800137a:	e02c      	b.n	80013d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	623b      	str	r3, [r7, #32]
          break;
 8001382:	e029      	b.n	80013d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	3304      	adds	r3, #4
 800138a:	623b      	str	r3, [r7, #32]
          break;
 800138c:	e024      	b.n	80013d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	3308      	adds	r3, #8
 8001394:	623b      	str	r3, [r7, #32]
          break;
 8001396:	e01f      	b.n	80013d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	330c      	adds	r3, #12
 800139e:	623b      	str	r3, [r7, #32]
          break;
 80013a0:	e01a      	b.n	80013d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d102      	bne.n	80013b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013aa:	2304      	movs	r3, #4
 80013ac:	623b      	str	r3, [r7, #32]
          break;
 80013ae:	e013      	b.n	80013d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d105      	bne.n	80013c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013b8:	2308      	movs	r3, #8
 80013ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	611a      	str	r2, [r3, #16]
          break;
 80013c2:	e009      	b.n	80013d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013c4:	2308      	movs	r3, #8
 80013c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	615a      	str	r2, [r3, #20]
          break;
 80013ce:	e003      	b.n	80013d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
          break;
 80013d4:	e000      	b.n	80013d8 <HAL_GPIO_Init+0x130>
          break;
 80013d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2bff      	cmp	r3, #255	@ 0xff
 80013dc:	d801      	bhi.n	80013e2 <HAL_GPIO_Init+0x13a>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	e001      	b.n	80013e6 <HAL_GPIO_Init+0x13e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3304      	adds	r3, #4
 80013e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2bff      	cmp	r3, #255	@ 0xff
 80013ec:	d802      	bhi.n	80013f4 <HAL_GPIO_Init+0x14c>
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	e002      	b.n	80013fa <HAL_GPIO_Init+0x152>
 80013f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f6:	3b08      	subs	r3, #8
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	210f      	movs	r1, #15
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	401a      	ands	r2, r3
 800140c:	6a39      	ldr	r1, [r7, #32]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	fa01 f303 	lsl.w	r3, r1, r3
 8001414:	431a      	orrs	r2, r3
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 80b1 	beq.w	800158a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001428:	4b4d      	ldr	r3, [pc, #308]	@ (8001560 <HAL_GPIO_Init+0x2b8>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a4c      	ldr	r2, [pc, #304]	@ (8001560 <HAL_GPIO_Init+0x2b8>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b4a      	ldr	r3, [pc, #296]	@ (8001560 <HAL_GPIO_Init+0x2b8>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001440:	4a48      	ldr	r2, [pc, #288]	@ (8001564 <HAL_GPIO_Init+0x2bc>)
 8001442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	3302      	adds	r3, #2
 8001448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800144e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220f      	movs	r2, #15
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a40      	ldr	r2, [pc, #256]	@ (8001568 <HAL_GPIO_Init+0x2c0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d013      	beq.n	8001494 <HAL_GPIO_Init+0x1ec>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a3f      	ldr	r2, [pc, #252]	@ (800156c <HAL_GPIO_Init+0x2c4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d00d      	beq.n	8001490 <HAL_GPIO_Init+0x1e8>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a3e      	ldr	r2, [pc, #248]	@ (8001570 <HAL_GPIO_Init+0x2c8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d007      	beq.n	800148c <HAL_GPIO_Init+0x1e4>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a3d      	ldr	r2, [pc, #244]	@ (8001574 <HAL_GPIO_Init+0x2cc>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d101      	bne.n	8001488 <HAL_GPIO_Init+0x1e0>
 8001484:	2303      	movs	r3, #3
 8001486:	e006      	b.n	8001496 <HAL_GPIO_Init+0x1ee>
 8001488:	2304      	movs	r3, #4
 800148a:	e004      	b.n	8001496 <HAL_GPIO_Init+0x1ee>
 800148c:	2302      	movs	r3, #2
 800148e:	e002      	b.n	8001496 <HAL_GPIO_Init+0x1ee>
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <HAL_GPIO_Init+0x1ee>
 8001494:	2300      	movs	r3, #0
 8001496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001498:	f002 0203 	and.w	r2, r2, #3
 800149c:	0092      	lsls	r2, r2, #2
 800149e:	4093      	lsls	r3, r2
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014a6:	492f      	ldr	r1, [pc, #188]	@ (8001564 <HAL_GPIO_Init+0x2bc>)
 80014a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	3302      	adds	r3, #2
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	492c      	ldr	r1, [pc, #176]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	608b      	str	r3, [r1, #8]
 80014cc:	e006      	b.n	80014dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	4928      	ldr	r1, [pc, #160]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 80014d8:	4013      	ands	r3, r2
 80014da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d006      	beq.n	80014f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014e8:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	4922      	ldr	r1, [pc, #136]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	60cb      	str	r3, [r1, #12]
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014f6:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	491e      	ldr	r1, [pc, #120]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 8001500:	4013      	ands	r3, r2
 8001502:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001510:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4918      	ldr	r1, [pc, #96]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800151e:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	43db      	mvns	r3, r3
 8001526:	4914      	ldr	r1, [pc, #80]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 8001528:	4013      	ands	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d021      	beq.n	800157c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	490e      	ldr	r1, [pc, #56]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	600b      	str	r3, [r1, #0]
 8001544:	e021      	b.n	800158a <HAL_GPIO_Init+0x2e2>
 8001546:	bf00      	nop
 8001548:	10320000 	.word	0x10320000
 800154c:	10310000 	.word	0x10310000
 8001550:	10220000 	.word	0x10220000
 8001554:	10210000 	.word	0x10210000
 8001558:	10120000 	.word	0x10120000
 800155c:	10110000 	.word	0x10110000
 8001560:	40021000 	.word	0x40021000
 8001564:	40010000 	.word	0x40010000
 8001568:	40010800 	.word	0x40010800
 800156c:	40010c00 	.word	0x40010c00
 8001570:	40011000 	.word	0x40011000
 8001574:	40011400 	.word	0x40011400
 8001578:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <HAL_GPIO_Init+0x304>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	43db      	mvns	r3, r3
 8001584:	4909      	ldr	r1, [pc, #36]	@ (80015ac <HAL_GPIO_Init+0x304>)
 8001586:	4013      	ands	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	3301      	adds	r3, #1
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	fa22 f303 	lsr.w	r3, r2, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	f47f ae8e 	bne.w	80012bc <HAL_GPIO_Init+0x14>
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	372c      	adds	r7, #44	@ 0x2c
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	40010400 	.word	0x40010400

080015b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	887b      	ldrh	r3, [r7, #2]
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e001      	b.n	80015d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	460b      	mov	r3, r1
 80015e8:	807b      	strh	r3, [r7, #2]
 80015ea:	4613      	mov	r3, r2
 80015ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ee:	787b      	ldrb	r3, [r7, #1]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f4:	887a      	ldrh	r2, [r7, #2]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015fa:	e003      	b.n	8001604 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015fc:	887b      	ldrh	r3, [r7, #2]
 80015fe:	041a      	lsls	r2, r3, #16
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	611a      	str	r2, [r3, #16]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
	...

08001610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e272      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 8087 	beq.w	800173e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001630:	4b92      	ldr	r3, [pc, #584]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b04      	cmp	r3, #4
 800163a:	d00c      	beq.n	8001656 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800163c:	4b8f      	ldr	r3, [pc, #572]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	d112      	bne.n	800166e <HAL_RCC_OscConfig+0x5e>
 8001648:	4b8c      	ldr	r3, [pc, #560]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001654:	d10b      	bne.n	800166e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001656:	4b89      	ldr	r3, [pc, #548]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d06c      	beq.n	800173c <HAL_RCC_OscConfig+0x12c>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d168      	bne.n	800173c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e24c      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x76>
 8001678:	4b80      	ldr	r3, [pc, #512]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a7f      	ldr	r2, [pc, #508]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 800167e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	e02e      	b.n	80016e4 <HAL_RCC_OscConfig+0xd4>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x98>
 800168e:	4b7b      	ldr	r3, [pc, #492]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a7a      	ldr	r2, [pc, #488]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b78      	ldr	r3, [pc, #480]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a77      	ldr	r2, [pc, #476]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e01d      	b.n	80016e4 <HAL_RCC_OscConfig+0xd4>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0xbc>
 80016b2:	4b72      	ldr	r3, [pc, #456]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a71      	ldr	r2, [pc, #452]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b6f      	ldr	r3, [pc, #444]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a6e      	ldr	r2, [pc, #440]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0xd4>
 80016cc:	4b6b      	ldr	r3, [pc, #428]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a6a      	ldr	r2, [pc, #424]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b68      	ldr	r3, [pc, #416]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a67      	ldr	r2, [pc, #412]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80016de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d013      	beq.n	8001714 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fcc4 	bl	8001078 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fcc0 	bl	8001078 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	@ 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e200      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b5d      	ldr	r3, [pc, #372]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0xe4>
 8001712:	e014      	b.n	800173e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fcb0 	bl	8001078 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fcac 	bl	8001078 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	@ 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e1ec      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	4b53      	ldr	r3, [pc, #332]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x10c>
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d063      	beq.n	8001812 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800174a:	4b4c      	ldr	r3, [pc, #304]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001756:	4b49      	ldr	r3, [pc, #292]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b08      	cmp	r3, #8
 8001760:	d11c      	bne.n	800179c <HAL_RCC_OscConfig+0x18c>
 8001762:	4b46      	ldr	r3, [pc, #280]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d116      	bne.n	800179c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	4b43      	ldr	r3, [pc, #268]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_RCC_OscConfig+0x176>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d001      	beq.n	8001786 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e1c0      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001786:	4b3d      	ldr	r3, [pc, #244]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4939      	ldr	r1, [pc, #228]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179a:	e03a      	b.n	8001812 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a4:	4b36      	ldr	r3, [pc, #216]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fc65 	bl	8001078 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b2:	f7ff fc61 	bl	8001078 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e1a1      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	4b2d      	ldr	r3, [pc, #180]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4927      	ldr	r1, [pc, #156]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e6:	4b26      	ldr	r3, [pc, #152]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fc44 	bl	8001078 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f4:	f7ff fc40 	bl	8001078 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e180      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d03a      	beq.n	8001894 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d019      	beq.n	800185a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001826:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <HAL_RCC_OscConfig+0x274>)
 8001828:	2201      	movs	r2, #1
 800182a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182c:	f7ff fc24 	bl	8001078 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001834:	f7ff fc20 	bl	8001078 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e160      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	4b0d      	ldr	r3, [pc, #52]	@ (800187c <HAL_RCC_OscConfig+0x26c>)
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001852:	2001      	movs	r0, #1
 8001854:	f000 fa9c 	bl	8001d90 <RCC_Delay>
 8001858:	e01c      	b.n	8001894 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <HAL_RCC_OscConfig+0x274>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001860:	f7ff fc0a 	bl	8001078 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001866:	e00f      	b.n	8001888 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001868:	f7ff fc06 	bl	8001078 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d908      	bls.n	8001888 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e146      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	42420000 	.word	0x42420000
 8001884:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001888:	4b92      	ldr	r3, [pc, #584]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1e9      	bne.n	8001868 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80a6 	beq.w	80019ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10d      	bne.n	80018ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b88      	ldr	r3, [pc, #544]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a87      	ldr	r2, [pc, #540]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018bc:	61d3      	str	r3, [r2, #28]
 80018be:	4b85      	ldr	r3, [pc, #532]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ca:	2301      	movs	r3, #1
 80018cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ce:	4b82      	ldr	r3, [pc, #520]	@ (8001ad8 <HAL_RCC_OscConfig+0x4c8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d118      	bne.n	800190c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018da:	4b7f      	ldr	r3, [pc, #508]	@ (8001ad8 <HAL_RCC_OscConfig+0x4c8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a7e      	ldr	r2, [pc, #504]	@ (8001ad8 <HAL_RCC_OscConfig+0x4c8>)
 80018e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e6:	f7ff fbc7 	bl	8001078 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ee:	f7ff fbc3 	bl	8001078 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b64      	cmp	r3, #100	@ 0x64
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e103      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	4b75      	ldr	r3, [pc, #468]	@ (8001ad8 <HAL_RCC_OscConfig+0x4c8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d106      	bne.n	8001922 <HAL_RCC_OscConfig+0x312>
 8001914:	4b6f      	ldr	r3, [pc, #444]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4a6e      	ldr	r2, [pc, #440]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6213      	str	r3, [r2, #32]
 8001920:	e02d      	b.n	800197e <HAL_RCC_OscConfig+0x36e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0x334>
 800192a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	4a69      	ldr	r2, [pc, #420]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	6213      	str	r3, [r2, #32]
 8001936:	4b67      	ldr	r3, [pc, #412]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4a66      	ldr	r2, [pc, #408]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	f023 0304 	bic.w	r3, r3, #4
 8001940:	6213      	str	r3, [r2, #32]
 8001942:	e01c      	b.n	800197e <HAL_RCC_OscConfig+0x36e>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b05      	cmp	r3, #5
 800194a:	d10c      	bne.n	8001966 <HAL_RCC_OscConfig+0x356>
 800194c:	4b61      	ldr	r3, [pc, #388]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	4a60      	ldr	r2, [pc, #384]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	6213      	str	r3, [r2, #32]
 8001958:	4b5e      	ldr	r3, [pc, #376]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6213      	str	r3, [r2, #32]
 8001964:	e00b      	b.n	800197e <HAL_RCC_OscConfig+0x36e>
 8001966:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6213      	str	r3, [r2, #32]
 8001972:	4b58      	ldr	r3, [pc, #352]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4a57      	ldr	r2, [pc, #348]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	f023 0304 	bic.w	r3, r3, #4
 800197c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d015      	beq.n	80019b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001986:	f7ff fb77 	bl	8001078 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff fb73 	bl	8001078 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e0b1      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ee      	beq.n	800198e <HAL_RCC_OscConfig+0x37e>
 80019b0:	e014      	b.n	80019dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fb61 	bl	8001078 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ba:	f7ff fb5d 	bl	8001078 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e09b      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d0:	4b40      	ldr	r3, [pc, #256]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1ee      	bne.n	80019ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d105      	bne.n	80019ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 8087 	beq.w	8001b06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f8:	4b36      	ldr	r3, [pc, #216]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d061      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d146      	bne.n	8001a9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0c:	4b33      	ldr	r3, [pc, #204]	@ (8001adc <HAL_RCC_OscConfig+0x4cc>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7ff fb31 	bl	8001078 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7ff fb2d 	bl	8001078 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e06d      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2c:	4b29      	ldr	r3, [pc, #164]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f0      	bne.n	8001a1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a40:	d108      	bne.n	8001a54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a42:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	4921      	ldr	r1, [pc, #132]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a19      	ldr	r1, [r3, #32]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	430b      	orrs	r3, r1
 8001a66:	491b      	ldr	r1, [pc, #108]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <HAL_RCC_OscConfig+0x4cc>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a72:	f7ff fb01 	bl	8001078 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7a:	f7ff fafd 	bl	8001078 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e03d      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x46a>
 8001a98:	e035      	b.n	8001b06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9a:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <HAL_RCC_OscConfig+0x4cc>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff faea 	bl	8001078 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff fae6 	bl	8001078 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e026      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x498>
 8001ac6:	e01e      	b.n	8001b06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d107      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e019      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40007000 	.word	0x40007000
 8001adc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_RCC_OscConfig+0x500>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000

08001b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0d0      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b28:	4b6a      	ldr	r3, [pc, #424]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d910      	bls.n	8001b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b67      	ldr	r3, [pc, #412]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 0207 	bic.w	r2, r3, #7
 8001b3e:	4965      	ldr	r1, [pc, #404]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b63      	ldr	r3, [pc, #396]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0b8      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d020      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b70:	4b59      	ldr	r3, [pc, #356]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a58      	ldr	r2, [pc, #352]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b88:	4b53      	ldr	r3, [pc, #332]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4a52      	ldr	r2, [pc, #328]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b94:	4b50      	ldr	r3, [pc, #320]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	494d      	ldr	r1, [pc, #308]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d040      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	4b47      	ldr	r3, [pc, #284]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d115      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e07f      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd2:	4b41      	ldr	r3, [pc, #260]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e073      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be2:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e06b      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf2:	4b39      	ldr	r3, [pc, #228]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f023 0203 	bic.w	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4936      	ldr	r1, [pc, #216]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c04:	f7ff fa38 	bl	8001078 <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f7ff fa34 	bl	8001078 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e053      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 020c 	and.w	r2, r3, #12
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1eb      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c34:	4b27      	ldr	r3, [pc, #156]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d210      	bcs.n	8001c64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 0207 	bic.w	r2, r3, #7
 8001c4a:	4922      	ldr	r1, [pc, #136]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e032      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c70:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4916      	ldr	r1, [pc, #88]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c8e:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	490e      	ldr	r1, [pc, #56]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ca2:	f000 f821 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	490a      	ldr	r1, [pc, #40]	@ (8001cdc <HAL_RCC_ClockConfig+0x1c8>)
 8001cb4:	5ccb      	ldrb	r3, [r1, r3]
 8001cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cba:	4a09      	ldr	r2, [pc, #36]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1cc>)
 8001cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1d0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff f996 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	08002620 	.word	0x08002620
 8001ce0:	2000006c 	.word	0x2000006c
 8001ce4:	20000070 	.word	0x20000070

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d02:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d002      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x30>
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d003      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0x36>
 8001d16:	e027      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d18:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d1a:	613b      	str	r3, [r7, #16]
      break;
 8001d1c:	e027      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	0c9b      	lsrs	r3, r3, #18
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	4a17      	ldr	r2, [pc, #92]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d28:	5cd3      	ldrb	r3, [r2, r3]
 8001d2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d010      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d36:	4b11      	ldr	r3, [pc, #68]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	0c5b      	lsrs	r3, r3, #17
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	4a11      	ldr	r2, [pc, #68]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d42:	5cd3      	ldrb	r3, [r2, r3]
 8001d44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a0d      	ldr	r2, [pc, #52]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d4a:	fb03 f202 	mul.w	r2, r3, r2
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e004      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	613b      	str	r3, [r7, #16]
      break;
 8001d66:	e002      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d6a:	613b      	str	r3, [r7, #16]
      break;
 8001d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d6e:	693b      	ldr	r3, [r7, #16]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	007a1200 	.word	0x007a1200
 8001d84:	08002630 	.word	0x08002630
 8001d88:	08002640 	.word	0x08002640
 8001d8c:	003d0900 	.word	0x003d0900

08001d90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d98:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <RCC_Delay+0x34>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <RCC_Delay+0x38>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	0a5b      	lsrs	r3, r3, #9
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dac:	bf00      	nop
  }
  while (Delay --);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1e5a      	subs	r2, r3, #1
 8001db2:	60fa      	str	r2, [r7, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f9      	bne.n	8001dac <RCC_Delay+0x1c>
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	2000006c 	.word	0x2000006c
 8001dc8:	10624dd3 	.word	0x10624dd3

08001dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e041      	b.n	8001e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d106      	bne.n	8001df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff f856 	bl	8000ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3304      	adds	r3, #4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	f000 fa5c 	bl	80022c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d001      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e03a      	b.n	8001efa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a18      	ldr	r2, [pc, #96]	@ (8001f04 <HAL_TIM_Base_Start_IT+0x98>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00e      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x58>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eae:	d009      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x58>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a14      	ldr	r2, [pc, #80]	@ (8001f08 <HAL_TIM_Base_Start_IT+0x9c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d004      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x58>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a13      	ldr	r2, [pc, #76]	@ (8001f0c <HAL_TIM_Base_Start_IT+0xa0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d111      	bne.n	8001ee8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d010      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee6:	e007      	b.n	8001ef8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	40012c00 	.word	0x40012c00
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40000800 	.word	0x40000800

08001f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d020      	beq.n	8001f74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01b      	beq.n	8001f74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0202 	mvn.w	r2, #2
 8001f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f998 	bl	8002290 <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f98b 	bl	800227e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f99a 	bl	80022a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d020      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01b      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0204 	mvn.w	r2, #4
 8001f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2202      	movs	r2, #2
 8001f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f972 	bl	8002290 <HAL_TIM_IC_CaptureCallback>
 8001fac:	e005      	b.n	8001fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f965 	bl	800227e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f974 	bl	80022a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d020      	beq.n	800200c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01b      	beq.n	800200c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0208 	mvn.w	r2, #8
 8001fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f94c 	bl	8002290 <HAL_TIM_IC_CaptureCallback>
 8001ff8:	e005      	b.n	8002006 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f93f 	bl	800227e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f94e 	bl	80022a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	2b00      	cmp	r3, #0
 8002014:	d020      	beq.n	8002058 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01b      	beq.n	8002058 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0210 	mvn.w	r2, #16
 8002028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2208      	movs	r2, #8
 800202e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f926 	bl	8002290 <HAL_TIM_IC_CaptureCallback>
 8002044:	e005      	b.n	8002052 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f919 	bl	800227e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f928 	bl	80022a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00c      	beq.n	800207c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d007      	beq.n	800207c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0201 	mvn.w	r2, #1
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe ff74 	bl	8000f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00c      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208c:	2b00      	cmp	r3, #0
 800208e:	d007      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa7f 	bl	800259e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00c      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f8f8 	bl	80022b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00c      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0220 	mvn.w	r2, #32
 80020e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fa52 	bl	800258c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020e8:	bf00      	nop
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_TIM_ConfigClockSource+0x1c>
 8002108:	2302      	movs	r3, #2
 800210a:	e0b4      	b.n	8002276 <HAL_TIM_ConfigClockSource+0x186>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800212a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002132:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002144:	d03e      	beq.n	80021c4 <HAL_TIM_ConfigClockSource+0xd4>
 8002146:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800214a:	f200 8087 	bhi.w	800225c <HAL_TIM_ConfigClockSource+0x16c>
 800214e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002152:	f000 8086 	beq.w	8002262 <HAL_TIM_ConfigClockSource+0x172>
 8002156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800215a:	d87f      	bhi.n	800225c <HAL_TIM_ConfigClockSource+0x16c>
 800215c:	2b70      	cmp	r3, #112	@ 0x70
 800215e:	d01a      	beq.n	8002196 <HAL_TIM_ConfigClockSource+0xa6>
 8002160:	2b70      	cmp	r3, #112	@ 0x70
 8002162:	d87b      	bhi.n	800225c <HAL_TIM_ConfigClockSource+0x16c>
 8002164:	2b60      	cmp	r3, #96	@ 0x60
 8002166:	d050      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x11a>
 8002168:	2b60      	cmp	r3, #96	@ 0x60
 800216a:	d877      	bhi.n	800225c <HAL_TIM_ConfigClockSource+0x16c>
 800216c:	2b50      	cmp	r3, #80	@ 0x50
 800216e:	d03c      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0xfa>
 8002170:	2b50      	cmp	r3, #80	@ 0x50
 8002172:	d873      	bhi.n	800225c <HAL_TIM_ConfigClockSource+0x16c>
 8002174:	2b40      	cmp	r3, #64	@ 0x40
 8002176:	d058      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x13a>
 8002178:	2b40      	cmp	r3, #64	@ 0x40
 800217a:	d86f      	bhi.n	800225c <HAL_TIM_ConfigClockSource+0x16c>
 800217c:	2b30      	cmp	r3, #48	@ 0x30
 800217e:	d064      	beq.n	800224a <HAL_TIM_ConfigClockSource+0x15a>
 8002180:	2b30      	cmp	r3, #48	@ 0x30
 8002182:	d86b      	bhi.n	800225c <HAL_TIM_ConfigClockSource+0x16c>
 8002184:	2b20      	cmp	r3, #32
 8002186:	d060      	beq.n	800224a <HAL_TIM_ConfigClockSource+0x15a>
 8002188:	2b20      	cmp	r3, #32
 800218a:	d867      	bhi.n	800225c <HAL_TIM_ConfigClockSource+0x16c>
 800218c:	2b00      	cmp	r3, #0
 800218e:	d05c      	beq.n	800224a <HAL_TIM_ConfigClockSource+0x15a>
 8002190:	2b10      	cmp	r3, #16
 8002192:	d05a      	beq.n	800224a <HAL_TIM_ConfigClockSource+0x15a>
 8002194:	e062      	b.n	800225c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021a6:	f000 f974 	bl	8002492 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80021b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	609a      	str	r2, [r3, #8]
      break;
 80021c2:	e04f      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021d4:	f000 f95d 	bl	8002492 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021e6:	609a      	str	r2, [r3, #8]
      break;
 80021e8:	e03c      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021f6:	461a      	mov	r2, r3
 80021f8:	f000 f8d4 	bl	80023a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2150      	movs	r1, #80	@ 0x50
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f92b 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 8002208:	e02c      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002216:	461a      	mov	r2, r3
 8002218:	f000 f8f2 	bl	8002400 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2160      	movs	r1, #96	@ 0x60
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f91b 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 8002228:	e01c      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002236:	461a      	mov	r2, r3
 8002238:	f000 f8b4 	bl	80023a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2140      	movs	r1, #64	@ 0x40
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f90b 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 8002248:	e00c      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4619      	mov	r1, r3
 8002254:	4610      	mov	r0, r2
 8002256:	f000 f902 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 800225a:	e003      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
      break;
 8002260:	e000      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002262:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
	...

080022c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a2f      	ldr	r2, [pc, #188]	@ (8002398 <TIM_Base_SetConfig+0xd0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00b      	beq.n	80022f8 <TIM_Base_SetConfig+0x30>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e6:	d007      	beq.n	80022f8 <TIM_Base_SetConfig+0x30>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a2c      	ldr	r2, [pc, #176]	@ (800239c <TIM_Base_SetConfig+0xd4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d003      	beq.n	80022f8 <TIM_Base_SetConfig+0x30>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a2b      	ldr	r2, [pc, #172]	@ (80023a0 <TIM_Base_SetConfig+0xd8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d108      	bne.n	800230a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a22      	ldr	r2, [pc, #136]	@ (8002398 <TIM_Base_SetConfig+0xd0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00b      	beq.n	800232a <TIM_Base_SetConfig+0x62>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002318:	d007      	beq.n	800232a <TIM_Base_SetConfig+0x62>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a1f      	ldr	r2, [pc, #124]	@ (800239c <TIM_Base_SetConfig+0xd4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d003      	beq.n	800232a <TIM_Base_SetConfig+0x62>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a1e      	ldr	r2, [pc, #120]	@ (80023a0 <TIM_Base_SetConfig+0xd8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d108      	bne.n	800233c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a0d      	ldr	r2, [pc, #52]	@ (8002398 <TIM_Base_SetConfig+0xd0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d103      	bne.n	8002370 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f023 0201 	bic.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	611a      	str	r2, [r3, #16]
  }
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	40012c00 	.word	0x40012c00
 800239c:	40000400 	.word	0x40000400
 80023a0:	40000800 	.word	0x40000800

080023a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f023 0201 	bic.w	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f023 030a 	bic.w	r3, r3, #10
 80023e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	621a      	str	r2, [r3, #32]
}
 80023f6:	bf00      	nop
 80023f8:	371c      	adds	r7, #28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	f023 0210 	bic.w	r2, r3, #16
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800242a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	031b      	lsls	r3, r3, #12
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800243c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	621a      	str	r2, [r3, #32]
}
 8002454:	bf00      	nop
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	f043 0307 	orr.w	r3, r3, #7
 8002480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002492:	b480      	push	{r7}
 8002494:	b087      	sub	sp, #28
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	021a      	lsls	r2, r3, #8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	609a      	str	r2, [r3, #8]
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e046      	b.n	8002576 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800250e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a16      	ldr	r2, [pc, #88]	@ (8002580 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d00e      	beq.n	800254a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002534:	d009      	beq.n	800254a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a12      	ldr	r2, [pc, #72]	@ (8002584 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d004      	beq.n	800254a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a10      	ldr	r2, [pc, #64]	@ (8002588 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d10c      	bne.n	8002564 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	4313      	orrs	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40000400 	.word	0x40000400
 8002588:	40000800 	.word	0x40000800

0800258c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <memset>:
 80025b0:	4603      	mov	r3, r0
 80025b2:	4402      	add	r2, r0
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d100      	bne.n	80025ba <memset+0xa>
 80025b8:	4770      	bx	lr
 80025ba:	f803 1b01 	strb.w	r1, [r3], #1
 80025be:	e7f9      	b.n	80025b4 <memset+0x4>

080025c0 <__libc_init_array>:
 80025c0:	b570      	push	{r4, r5, r6, lr}
 80025c2:	2600      	movs	r6, #0
 80025c4:	4d0c      	ldr	r5, [pc, #48]	@ (80025f8 <__libc_init_array+0x38>)
 80025c6:	4c0d      	ldr	r4, [pc, #52]	@ (80025fc <__libc_init_array+0x3c>)
 80025c8:	1b64      	subs	r4, r4, r5
 80025ca:	10a4      	asrs	r4, r4, #2
 80025cc:	42a6      	cmp	r6, r4
 80025ce:	d109      	bne.n	80025e4 <__libc_init_array+0x24>
 80025d0:	f000 f81a 	bl	8002608 <_init>
 80025d4:	2600      	movs	r6, #0
 80025d6:	4d0a      	ldr	r5, [pc, #40]	@ (8002600 <__libc_init_array+0x40>)
 80025d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002604 <__libc_init_array+0x44>)
 80025da:	1b64      	subs	r4, r4, r5
 80025dc:	10a4      	asrs	r4, r4, #2
 80025de:	42a6      	cmp	r6, r4
 80025e0:	d105      	bne.n	80025ee <__libc_init_array+0x2e>
 80025e2:	bd70      	pop	{r4, r5, r6, pc}
 80025e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80025e8:	4798      	blx	r3
 80025ea:	3601      	adds	r6, #1
 80025ec:	e7ee      	b.n	80025cc <__libc_init_array+0xc>
 80025ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f2:	4798      	blx	r3
 80025f4:	3601      	adds	r6, #1
 80025f6:	e7f2      	b.n	80025de <__libc_init_array+0x1e>
 80025f8:	08002644 	.word	0x08002644
 80025fc:	08002644 	.word	0x08002644
 8002600:	08002644 	.word	0x08002644
 8002604:	08002648 	.word	0x08002648

08002608 <_init>:
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	bf00      	nop
 800260c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260e:	bc08      	pop	{r3}
 8002610:	469e      	mov	lr, r3
 8002612:	4770      	bx	lr

08002614 <_fini>:
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	bf00      	nop
 8002618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261a:	bc08      	pop	{r3}
 800261c:	469e      	mov	lr, r3
 800261e:	4770      	bx	lr
